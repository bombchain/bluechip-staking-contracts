{
  "address": "0xd5ABcFEDA591A33B6A2d9e0c2B5C31Dc8f238A60",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FundsDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FundsReturned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_capacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "UpdateAssetMetadata",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "_deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yieldEarned",
          "type": "uint256"
        }
      ],
      "name": "_withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "deployFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_stakeToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_baseTokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "useDefaultLocks",
          "type": "bool"
        }
      ],
      "name": "deployStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "governanceRecoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positionForAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "returnDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "stakeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "positionToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "created",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldEarned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deployedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakePositionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator_",
          "type": "address"
        }
      ],
      "name": "transferOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_active",
          "type": "bool"
        }
      ],
      "name": "updateAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf27954b51bdbd763f670aa475f3246577faeed30c0c2dfabd63c4e8efdede939",
  "receipt": {
    "to": null,
    "from": "0x0DCC098Fa701906a49c3196B1FD2464F4802F4E2",
    "contractAddress": "0xd5ABcFEDA591A33B6A2d9e0c2B5C31Dc8f238A60",
    "transactionIndex": 1,
    "gasUsed": "5413962",
    "logsBloom": "0x
    "blockHash": "0x0cb474c7cb92373ef9cc0d022980d7b02ee9a56a28cb6b66376ea5a5c560ca72",
    "transactionHash": "0xf27954b51bdbd763f670aa475f3246577faeed30c0c2dfabd63c4e8efdede939",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 26003482,
        "transactionHash": "0xf27954b51bdbd763f670aa475f3246577faeed30c0c2dfabd63c4e8efdede939",
        "address": "0xd5ABcFEDA591A33B6A2d9e0c2B5C31Dc8f238A60",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dcc098fa701906a49c3196b1fd2464f4802f4e2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0cb474c7cb92373ef9cc0d022980d7b02ee9a56a28cb6b66376ea5a5c560ca72"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 26003482,
        "transactionHash": "0xf27954b51bdbd763f670aa475f3246577faeed30c0c2dfabd63c4e8efdede939",
        "address": "0xd5ABcFEDA591A33B6A2d9e0c2B5C31Dc8f238A60",
        "topics": [
          "0x74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000dcc098fa701906a49c3196b1fd2464f4802f4e2"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x0cb474c7cb92373ef9cc0d022980d7b02ee9a56a28cb6b66376ea5a5c560ca72"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 26003482,
        "transactionHash": "0xf27954b51bdbd763f670aa475f3246577faeed30c0c2dfabd63c4e8efdede939",
        "address": "0xd5ABcFEDA591A33B6A2d9e0c2B5C31Dc8f238A60",
        "topics": [
          "0x74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000d8e060ca2d847553ec14394ee6b304623e0d1d6"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x0cb474c7cb92373ef9cc0d022980d7b02ee9a56a28cb6b66376ea5a5c560ca72"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 26003482,
        "transactionHash": "0xf27954b51bdbd763f670aa475f3246577faeed30c0c2dfabd63c4e8efdede939",
        "address": "0xd5ABcFEDA591A33B6A2d9e0c2B5C31Dc8f238A60",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000dcc098fa701906a49c3196b1fd2464f4802f4e2",
          "0x0000000000000000000000000d8e060ca2d847553ec14394ee6b304623e0d1d6"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x0cb474c7cb92373ef9cc0d022980d7b02ee9a56a28cb6b66376ea5a5c560ca72"
      }
    ],
    "blockNumber": 26003482,
    "cumulativeGasUsed": "5443472",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0D8e060CA2D847553ec14394ee6B304623E0d1d6"
  ],
  "numDeployments": 6,
  "solcInputHash": "6678ef7a47126913d3d5b66d58e438d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FundsReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"UpdateAssetMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yieldEarned\",\"type\":\"uint256\"}],\"name\":\"_withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"deployFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useDefaultLocks\",\"type\":\"bool\"}],\"name\":\"deployStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"governanceRecoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positionForAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"returnDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"positionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"created\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deployedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakePositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"updateAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeVault.sol\":\"StakeVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/StakeVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./interfaces/IStakingPositions.sol\\\";\\nimport \\\"./StakingPositions.sol\\\";\\nimport \\\"./interfaces/IStakeVault.sol\\\";\\n\\nimport \\\"./owner/Operator.sol\\\";\\n\\ncontract StakeVault is ReentrancyGuard, Operator {\\n    using Counters for Counters.Counter;\\n    using Strings for uint256;\\n\\n    struct StakeAsset {\\n        address stakeToken;\\n        address positionToken;\\n        uint256 created;\\n        uint256 capacity; // set 0 for no limit\\n        uint256 stakedAmount; // amount already staked\\n        uint256 yieldEarned;\\n        uint256 endTime; // set 0 for no end\\n        uint256 deployedAmount;\\n        bool active;\\n    }\\n\\n    struct AprLockDefaults {\\n        uint16 apr;\\n        uint256 lockTime;\\n    }\\n\\n    AprLockDefaults[] internal _defaultAprLockOptions;\\n\\n    StakeAsset[] public stakeAssets;\\n\\n    mapping(address => address) public positionForAsset;\\n\\n    mapping(address => uint256) public stakePositionId;\\n\\n    Counters.Counter internal _ids;\\n\\n    modifier onlyPositionOrOwner() {\\n        require(\\n            checkIfAddressIsPosition(_msgSender()) || owner() == _msgSender(),\\n            \\\"!owner\\\"\\n        );\\n        _;\\n    }\\n\\n    event UpdateAssetMetadata(\\n        uint256 indexed _stakeId,\\n        uint256 _capacity,\\n        uint256 _endTime,\\n        bool _active\\n    );\\n\\n    event FundsDeployed(uint256 indexed _stakeId, uint256 _amount);\\n\\n    event FundsReturned(uint256 indexed _stakeId, uint256 _amount);\\n\\n    event Deposit(address indexed _token, uint256 _amount);\\n\\n    event Withdraw(address indexed _token, uint256 _amount);\\n\\n    constructor(address _devAddress) {\\n        _transferOperator(_devAddress);\\n        _transferOwnership(_devAddress);\\n    }\\n\\n    function deployStake(\\n        string memory _name,\\n        string memory _symbol,\\n        address _stakeToken,\\n        string memory _baseTokenURI,\\n        uint256 _capacity,\\n        uint256 _endTime,\\n        bool useDefaultLocks\\n    ) external onlyOwner {\\n        require(\\n            !checkStakeDuplicate(_stakeToken),\\n            \\\"Stake already exists for this asset, please update it\\\"\\n        );\\n\\n        StakingPositions newStake = new StakingPositions(\\n            _name,\\n            _symbol,\\n            _stakeToken,\\n            address(this),\\n            _baseTokenURI,\\n            _capacity,\\n            _endTime\\n        );\\n        _registerAsset(_stakeToken, address(newStake), _capacity, _endTime);\\n\\n        if (useDefaultLocks) {\\n            _addDefaultLocks(newStake);\\n        }\\n        newStake.transferOwnership(owner());\\n    }\\n\\n    function _addDefaultLocks(StakingPositions _stakePosition) internal {\\n        _stakePosition.addAprLockOption(920, 90 days);\\n        _stakePosition.addAprLockOption(1490, 180 days);\\n        _stakePosition.addAprLockOption(2170, 270 days);\\n        _stakePosition.addAprLockOption(2980, 360 days);\\n    }\\n\\n    function _deposit(\\n        address _user,\\n        address _token,\\n        uint256 _amount\\n    ) external onlyPositionOrOwner {\\n        uint256 stakeId = stakePositionId[_msgSender()];\\n        StakeAsset storage _stakeAsset = stakeAssets[stakeId];\\n\\n        _stakeAsset.stakedAmount += _amount;\\n\\n        emit Deposit(_token, _amount);\\n        require(\\n            ERC20(_token).transferFrom(_user, address(this), _amount),\\n            \\\"Token could not be transferred\\\"\\n        );\\n    }\\n\\n    function _withdraw(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _yieldEarned\\n    ) external onlyPositionOrOwner {\\n        uint256 stakeId = stakePositionId[_msgSender()];\\n        StakeAsset storage _stakeAsset = stakeAssets[stakeId];\\n        require(_stakeAsset.created > 0, \\\"Stake does not exist\\\");\\n        _stakeAsset.stakedAmount -= _amount;\\n        _stakeAsset.yieldEarned += _yieldEarned;\\n\\n        emit Withdraw(_token, _amount + _yieldEarned);\\n        require(\\n            ERC20(_token).transfer(_user, _amount + _yieldEarned),\\n            \\\"Token could not be transferred\\\"\\n        );\\n    }\\n\\n    function _registerAsset(\\n        address _stakeToken,\\n        address _stakePosition,\\n        uint256 _capacity,\\n        uint256 _endTime\\n    ) internal {\\n        stakeAssets.push(\\n            StakeAsset({\\n                stakeToken: _stakeToken,\\n                positionToken: _stakePosition,\\n                created: block.timestamp,\\n                capacity: _capacity,\\n                stakedAmount: 0,\\n                yieldEarned: 0,\\n                endTime: _endTime,\\n                deployedAmount: 0,\\n                active: true\\n            })\\n        );\\n\\n        positionForAsset[_stakeToken] = _stakePosition;\\n        stakePositionId[_stakeToken] = stakeAssets.length - 1;\\n    }\\n\\n    function updateAsset(\\n        uint256 _stakeId,\\n        uint256 _capacity,\\n        uint256 _endTime,\\n        bool _active\\n    ) external onlyOwner {\\n        require(stakeAssets[_stakeId].created > 0, \\\"Stake does not exist\\\");\\n        StakeAsset storage stakePosition = stakeAssets[_stakeId];\\n        stakePosition.capacity = _capacity;\\n        stakePosition.endTime = _endTime;\\n        stakePosition.active = _active;\\n\\n        emit UpdateAssetMetadata(_stakeId, _capacity, _endTime, _active);\\n    }\\n\\n    function deployFunds(\\n        uint256 _stakeId,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOwnerOrOperator {\\n        require(stakeAssets[_stakeId].created > 0, \\\"Stake does not exist\\\");\\n\\n        StakeAsset storage stakePosition = stakeAssets[_stakeId];\\n        stakePosition.deployedAmount += _amount;\\n        IERC20 _token = IERC20(stakePosition.stakeToken);\\n\\n        require(\\n            _token.transfer(_to, _amount),\\n            \\\"Token could not be transferred\\\"\\n        );\\n\\n        emit FundsDeployed(_stakeId, _amount);\\n    }\\n\\n    function returnDeployedFunds(\\n        uint256 _stakeId,\\n        uint256 _amount,\\n        address _from\\n    ) external onlyOwnerOrOperator {\\n        require(stakeAssets[_stakeId].created > 0, \\\"Stake does not exist\\\");\\n\\n        StakeAsset storage stakePosition = stakeAssets[_stakeId];\\n        IERC20 _token = IERC20(stakePosition.stakeToken);\\n        require(\\n            _token.transferFrom(_from, address(this), _amount),\\n            \\\"Token could not be transferred\\\"\\n        );\\n\\n        stakePosition.deployedAmount -= _amount;\\n\\n        emit FundsReturned(_stakeId, _amount);\\n    }\\n\\n    function checkStakeDuplicate(address _token) internal view returns (bool) {\\n        uint256 length = stakeAssets.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            if (stakeAssets[pid].stakeToken == _token) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function _approveTokenIfNeeded(address token, address spender) private {\\n        if (ERC20(token).allowance(address(this), spender) == 0) {\\n            require(\\n                ERC20(token).approve(spender, type(uint256).max),\\n                \\\"Could not approve token\\\"\\n            );\\n        }\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        ERC20 _token,\\n        address _to\\n    ) external onlyOwner {\\n        require(\\n            _token.transfer(_to, _token.balanceOf(address(this))),\\n            \\\"Token could not be transferred\\\"\\n        );\\n    }\\n\\n    function checkIfAddressIsPosition(\\n        address _position\\n    ) internal view returns (bool) {\\n        uint256 length = stakeAssets.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            if (stakeAssets[pid].positionToken == _position) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xd01c088159af26cc154fe6b17eae6d727216f1748deb648cbd426f64a98c4433\",\"license\":\"MIT\"},\"contracts/StakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./owner/Operator.sol\\\";\\n\\nimport \\\"./interfaces/IStakeVault.sol\\\";\\n\\ncontract StakingPositions is ERC721Enumerable, Operator {\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    uint256 private constant ONE_YEAR = 365 days;\\n    uint256 private constant ONE_WEEK = 7 days;\\n    uint16 private constant PERCENT_DENOMENATOR = 10000;\\n\\n    IERC20 internal stakeToken;\\n\\n    IStakeVault public vault;\\n\\n    struct AprLock {\\n        uint16 apr;\\n        uint256 lockTime;\\n    }\\n\\n    AprLock[] internal _aprLockOptions;\\n\\n    struct Stake {\\n        uint256 created;\\n        uint256 amountStaked;\\n        uint16 apr;\\n        uint256 lockTime;\\n        bool allowWithdrawEarly;\\n        bool assetTransferred;\\n    }\\n    // tokenId => Stake\\n    mapping(uint256 => Stake) public stakes;\\n\\n    mapping(uint256 => bool) public isBlacklisted;\\n\\n    Counters.Counter internal _ids;\\n    string private baseTokenURI; // baseTokenURI can point to IPFS folder like https://ipfs.io/ipfs/{cid}/ while\\n\\n    // array of all the NFT token IDs owned by a user\\n    mapping(address => uint256[]) public allUserOwned;\\n    // the index in the token ID array at allUserOwned to save gas on operations\\n\\n    mapping(uint256 => uint256) public ownedIndex;\\n\\n    mapping(uint256 => uint256) public tokenMintedAt;\\n\\n    mapping(uint256 => uint256) public tokenLastTransferred;\\n\\n    mapping(address => bool) public hasReceivedBonus;\\n\\n    uint256 referralBonusAmount = 0.003 ether;\\n\\n    uint256 referralMinAmount = 0.01 ether;\\n\\n    uint256 referralBonusLockIndex = 1;\\n\\n    uint256 public capacity;\\n\\n    uint256 public endTime;\\n\\n    uint256 public amountStaked;\\n\\n    uint256 public totalYieldAtMaturity;\\n\\n    address private _operator;\\n\\n    modifier onlyOwnerOrVault() {\\n        require(\\n            address(vault) == msg.sender ||\\n                // treasury == msg.sender ||\\n                owner() == msg.sender,\\n            \\\"!owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyIfNoBonus() {\\n        require(!hasReceivedBonus[msg.sender], \\\"Bonus already received\\\");\\n        _;\\n    }\\n\\n    event CreateStake(\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        uint256 amountStaked,\\n        uint256 lockOptionIndex,\\n        bool fromCompound\\n    );\\n\\n    event UnstakeTokens(\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        bool toCompound,\\n        bool earlyUnstake,\\n        bool refunded\\n    );\\n\\n    event SetAnnualApr(uint256 indexed newApr);\\n\\n    event SetBaseTokenURI(string indexed newUri);\\n\\n    event AddAprLockOption(uint16 indexed apr, uint256 lockTime);\\n\\n    event RemoveAprLockOption(\\n        uint256 indexed index,\\n        uint16 indexed apr,\\n        uint256 lockTime\\n    );\\n\\n    event UpdateAprLockOption(\\n        uint256 indexed index,\\n        uint16 indexed oldApr,\\n        uint256 oldLockTime,\\n        uint16 newApr,\\n        uint256 newLockTime\\n    );\\n\\n    event SetTokenBlacklist(uint256 indexed tokenId, bool isBlacklisted);\\n\\n    event SetBonusAmount(uint256 indexed bonusAmount);\\n\\n    event SetBonusMinAmount(uint256 indexed bonusMinAmount);\\n\\n    event SetBonusLockIndex(uint256 indexed lockIndex);\\n\\n    event ReferralBonusAwarded(\\n        address indexed user,\\n        uint256 bonusAmount,\\n        uint256 bonusLockIndex\\n    );\\n\\n    event FreePositionBonus(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 lockIndex\\n    );\\n\\n    event SetCapacity(uint256 indexed capacity);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _stakeToken,\\n        address _vault,\\n        string memory _baseTokenURI,\\n        uint256 _capacity,\\n        uint256 _endTime\\n    ) ERC721(_name, _symbol) {\\n        stakeToken = IERC20(_stakeToken);\\n        baseTokenURI = _baseTokenURI;\\n        vault = IStakeVault(_vault);\\n        capacity = _capacity;\\n        endTime = _endTime;\\n        _transferOperator(vault.owner());\\n    }\\n\\n    function stake(uint256 _amount, uint256 _lockOptIndex) external virtual {\\n        _stake(_msgSender(), _amount, _lockOptIndex, true, true, false);\\n    }\\n\\n    function freeStakeBonus(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _lockOptIndex\\n    ) external virtual onlyOperator {\\n        _stake(_user, _amount, _lockOptIndex, false, false, false);\\n        emit FreePositionBonus(_user, _amount, _lockOptIndex);\\n    }\\n\\n    function stakeWithReferral(\\n        uint256 _amount,\\n        uint256 _lockOptIndex,\\n        address _referrer\\n    ) external virtual onlyIfNoBonus {\\n        require(_amount >= referralMinAmount, \\\"Must stake larger amount\\\");\\n        _stake(msg.sender, _amount, _lockOptIndex, true, false, false);\\n\\n        hasReceivedBonus[_msgSender()] = true;\\n\\n        _stake(\\n            msg.sender,\\n            referralBonusAmount,\\n            referralBonusLockIndex,\\n            false,\\n            false,\\n            false\\n        );\\n        _stake(\\n            _referrer,\\n            referralBonusAmount,\\n            referralBonusLockIndex,\\n            false,\\n            false,\\n            false\\n        );\\n\\n        emit ReferralBonusAwarded(\\n            msg.sender,\\n            referralBonusAmount,\\n            referralBonusLockIndex\\n        );\\n        emit ReferralBonusAwarded(\\n            _referrer,\\n            referralBonusAmount,\\n            referralBonusLockIndex\\n        );\\n    }\\n\\n    function _stake(\\n        address _user,\\n        uint256 _amountStaked,\\n        uint256 _lockOptIndex,\\n        bool _transferStakeToken,\\n        bool _allowWithdrawEarly,\\n        bool _fromCompound\\n    ) internal {\\n        require(_lockOptIndex < _aprLockOptions.length, \\\"invalid lock option\\\");\\n        _amountStaked = _amountStaked == 0\\n            ? stakeToken.balanceOf(_user)\\n            : _amountStaked;\\n        require(\\n            _amountStaked > 0,\\n            \\\"must stake and be earning at least some tokens\\\"\\n        );\\n        require(\\n            _amountStaked + amountStaked <= capacity || capacity == 0,\\n            \\\"Over capacity\\\"\\n        );\\n        require(\\n            block.timestamp <= endTime || endTime == 0,\\n            \\\"Stake period over\\\"\\n        );\\n\\n        amountStaked += _amountStaked;\\n        _ids.increment();\\n        uint256 _yieldAtMaturity = (_amountStaked *\\n            _aprLockOptions[_lockOptIndex].apr *\\n            _aprLockOptions[_lockOptIndex].lockTime) /\\n            PERCENT_DENOMENATOR /\\n            ONE_YEAR;\\n        totalYieldAtMaturity += _yieldAtMaturity;\\n        if (_transferStakeToken) {\\n            vault._deposit(_user, address(stakeToken), _amountStaked);\\n        }\\n        stakes[_ids.current()] = Stake({\\n            created: block.timestamp,\\n            amountStaked: _amountStaked,\\n            apr: _aprLockOptions[_lockOptIndex].apr,\\n            lockTime: _aprLockOptions[_lockOptIndex].lockTime,\\n            allowWithdrawEarly: _allowWithdrawEarly,\\n            assetTransferred: _transferStakeToken\\n        });\\n\\n        _safeMint(_user, _ids.current());\\n        tokenMintedAt[_ids.current()] = block.timestamp;\\n\\n        emit CreateStake(\\n            _user,\\n            _ids.current(),\\n            _amountStaked,\\n            _lockOptIndex,\\n            _fromCompound\\n        );\\n    }\\n\\n    function withdraw(uint256 _tokenId, bool _isEarlyWithdraw) public {\\n        address _user = msg.sender;\\n        Stake memory _tokenStake = stakes[_tokenId];\\n        require(\\n            _user == ownerOf(_tokenId),\\n            \\\"only the owner of the staked tokens can unstake\\\"\\n        );\\n        bool _isUnstakingEarly = block.timestamp <\\n            _tokenStake.created + _tokenStake.lockTime;\\n\\n        if (_isUnstakingEarly) {\\n            require(\\n                _tokenStake.allowWithdrawEarly,\\n                \\\"This position is not eligible for early withdraw\\\"\\n            );\\n            require(\\n                _isEarlyWithdraw,\\n                \\\"Must acknowledge the early withdraw due to loss of tokens\\\"\\n            );\\n            vault._withdraw(\\n                _user,\\n                address(stakeToken),\\n                _tokenStake.amountStaked / 2,\\n                0\\n            );\\n            emit UnstakeTokens(_user, _tokenId, false, true, false);\\n        } else {\\n            uint256 _totalEarnedAmount = getTotalEarnedAmount(_tokenId);\\n            vault._withdraw(\\n                _user,\\n                address(stakeToken),\\n                _tokenStake.amountStaked,\\n                _totalEarnedAmount\\n            );\\n            emit UnstakeTokens(_user, _tokenId, false, false, false);\\n        }\\n\\n        // this NFT is useless after the user unstakes\\n        _burn(_tokenId);\\n    }\\n\\n    function adminRefundDeposit(uint256 _tokenId) external onlyOwnerOrOperator {\\n        Stake memory _tokenStake = stakes[_tokenId];\\n\\n        address _user = ownerOf(_tokenId);\\n\\n        vault._withdraw(\\n            _user,\\n            address(stakeToken),\\n            _tokenStake.amountStaked,\\n            0\\n        );\\n        emit UnstakeTokens(_user, _tokenId, false, false, true);\\n\\n        // this NFT is useless after the user unstakes\\n        _burn(_tokenId);\\n    }\\n\\n    function withdrawMulti(\\n        uint256[] memory _tokenIds,\\n        bool isWithdrawEarly\\n    ) external {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            withdraw(_tokenIds[i], isWithdrawEarly);\\n        }\\n    }\\n\\n    function claimAndCompound(\\n        address _user,\\n        uint256 _tokenId,\\n        uint256 _lockOptIndex\\n    ) public {\\n        require(!isBlacklisted[_tokenId], \\\"blacklisted NFT\\\");\\n        require(_user == ownerOf(_tokenId));\\n        Stake memory _tokenStake = stakes[_tokenId];\\n        require(\\n            block.timestamp > _tokenStake.created + _tokenStake.lockTime,\\n            \\\"Position is not at maturity\\\"\\n        );\\n\\n        uint256 _totalEarnedAmount = getTotalEarnedAmount(_tokenId);\\n\\n        _burn(_tokenId);\\n        emit UnstakeTokens(_user, _tokenId, true, false, false);\\n\\n        _stake(\\n            _user,\\n            _tokenStake.amountStaked + _totalEarnedAmount,\\n            _lockOptIndex,\\n            false,\\n            true,\\n            true\\n        );\\n    }\\n\\n    function claimAndCompoundMulti(\\n        address _user,\\n        uint256[] memory _tokenIds,\\n        uint256 _lockOptIndex\\n    ) external {\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            claimAndCompound(_user, _tokenIds[i], _lockOptIndex);\\n        }\\n    }\\n\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) public view virtual override returns (string memory) {\\n        require(_exists(_tokenId), \\\"token does not exist\\\");\\n        return\\n            string(abi.encodePacked(_baseURI(), _tokenId.toString(), \\\".json\\\"));\\n    }\\n\\n    // Contract metadata URI - Support for OpenSea: https://docs.opensea.io/docs/contract-level-metadata\\n    function contractURI() public view returns (string memory) {\\n        return string(abi.encodePacked(_baseURI(), \\\"contract.json\\\"));\\n    }\\n\\n    // Override supportsInterface - See {IERC165-supportsInterface}\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) public view virtual override(ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(_interfaceId);\\n    }\\n\\n    function getLastMintedTokenId() external view returns (uint256) {\\n        return _ids.current();\\n    }\\n\\n    // function getStakeToken() external view returns (address) {\\n    //     return address(stakeToken);\\n    // }\\n\\n    function isTokenMinted(uint256 _tokenId) external view returns (bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    function setBaseURI(string memory _uri) external onlyOwner {\\n        baseTokenURI = _uri;\\n        emit SetBaseTokenURI(_uri);\\n    }\\n\\n    function getAllUserOwned(\\n        address _user\\n    ) external view returns (uint256[] memory) {\\n        return allUserOwned[_user];\\n    }\\n\\n    function getTotalEarnedAmount(\\n        uint256 _tokenId\\n    ) public view returns (uint256) {\\n        Stake memory _tokenStake = stakes[_tokenId];\\n        uint256 _secondsStaked = block.timestamp - _tokenStake.created;\\n        uint256 _secondsRewards;\\n        if (_secondsStaked > (_tokenStake.lockTime)) {\\n            _secondsRewards = _tokenStake.lockTime;\\n        } else {\\n            _secondsRewards = _secondsStaked;\\n        }\\n\\n        return\\n            (_tokenStake.amountStaked * _tokenStake.apr * _secondsRewards) /\\n            PERCENT_DENOMENATOR /\\n            ONE_YEAR;\\n    }\\n\\n    function getTotalYieldAtMaturity(\\n        uint256 _tokenId\\n    ) public view returns (uint256) {\\n        Stake memory _tokenStake = stakes[_tokenId];\\n\\n        // uint256 _secondsRewards = _tokenStake.created + _tokenStake.lockTime;\\n\\n        return\\n            (_tokenStake.amountStaked *\\n                _tokenStake.apr *\\n                _tokenStake.lockTime) /\\n            PERCENT_DENOMENATOR /\\n            ONE_YEAR;\\n    }\\n\\n    function getTotalValueAtMaturity(\\n        uint256 _tokenId\\n    ) public view returns (uint256) {\\n        Stake memory _tokenStake = stakes[_tokenId];\\n\\n        //  uint256 _secondsRewards = _tokenStake.created + _tokenStake.lockTime;\\n\\n        return\\n            _tokenStake.amountStaked +\\n            ((_tokenStake.amountStaked *\\n                _tokenStake.apr *\\n                _tokenStake.lockTime) /\\n                PERCENT_DENOMENATOR /\\n                ONE_YEAR);\\n    }\\n\\n    function getAllLockOptions() external view returns (AprLock[] memory) {\\n        return _aprLockOptions;\\n    }\\n\\n    function addAprLockOption(\\n        uint16 _apr,\\n        uint256 _lockTime\\n    ) external onlyOwnerOrVault {\\n        _addAprLockOption(_apr, _lockTime);\\n        emit AddAprLockOption(_apr, _lockTime);\\n    }\\n\\n    function _addAprLockOption(uint16 _apr, uint256 _lockTime) internal {\\n        _aprLockOptions.push(AprLock({apr: _apr, lockTime: _lockTime}));\\n    }\\n\\n    function removeAprLockOption(uint256 _index) external onlyOwnerOrVault {\\n        AprLock memory _option = _aprLockOptions[_index];\\n        _aprLockOptions[_index] = _aprLockOptions[_aprLockOptions.length - 1];\\n        _aprLockOptions.pop();\\n        emit RemoveAprLockOption(_index, _option.apr, _option.lockTime);\\n    }\\n\\n    function updateAprLockOption(\\n        uint256 _index,\\n        uint16 _apr,\\n        uint256 _lockTime\\n    ) external onlyOwnerOrVault {\\n        AprLock memory _option = _aprLockOptions[_index];\\n        _aprLockOptions[_index] = AprLock({apr: _apr, lockTime: _lockTime});\\n        emit UpdateAprLockOption(\\n            _index,\\n            _option.apr,\\n            _option.lockTime,\\n            _apr,\\n            _lockTime\\n        );\\n    }\\n\\n    function setBonusAmount(uint256 _bonusAmount) external onlyOwner {\\n        referralBonusAmount = _bonusAmount;\\n        emit SetBonusAmount(_bonusAmount);\\n    }\\n\\n    function setBonusMinAmount(uint256 _bonusMinAmount) external onlyOwner {\\n        referralMinAmount = _bonusMinAmount;\\n        emit SetBonusMinAmount(_bonusMinAmount);\\n    }\\n\\n    function setBonusLockIndex(uint256 _lockIndex) external onlyOwner {\\n        referralBonusLockIndex = _lockIndex;\\n        emit SetBonusLockIndex(_lockIndex);\\n    }\\n\\n    function setCapacity(uint256 _capacity) external onlyOwner {\\n        capacity = _capacity;\\n        emit SetCapacity(_capacity);\\n    }\\n\\n    function setIsBlacklisted(\\n        uint256 _tokenId,\\n        bool _isBlacklisted\\n    ) external onlyOwner {\\n        isBlacklisted[_tokenId] = _isBlacklisted;\\n        emit SetTokenBlacklist(_tokenId, _isBlacklisted);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseTokenURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual override(ERC721Enumerable) {\\n        require(!isBlacklisted[_tokenId], \\\"blacklisted NFT\\\");\\n        tokenLastTransferred[_tokenId] = block.timestamp;\\n\\n        super._beforeTokenTransfer(_from, _to, _tokenId);\\n    }\\n\\n    function _afterTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual override(ERC721) {\\n        // if from == address(0), token is being minted\\n        if (_from != address(0)) {\\n            uint256 _currIndex = ownedIndex[_tokenId];\\n            uint256 _tokenIdMovingIndices = allUserOwned[_from][\\n                allUserOwned[_from].length - 1\\n            ];\\n            allUserOwned[_from][_currIndex] = allUserOwned[_from][\\n                allUserOwned[_from].length - 1\\n            ];\\n            allUserOwned[_from].pop();\\n            ownedIndex[_tokenIdMovingIndices] = _currIndex;\\n        }\\n\\n        // if to == address(0), token is being burned\\n        if (_to != address(0)) {\\n            ownedIndex[_tokenId] = allUserOwned[_to].length;\\n            allUserOwned[_to].push(_tokenId);\\n        }\\n\\n        super._afterTokenTransfer(_from, _to, _tokenId);\\n    }\\n\\n    function governanceRecoverUnsupported(\\n        IERC20 _token,\\n        address _to\\n    ) external onlyOwnerOrVault {\\n        require(\\n            _token.transfer(_to, _token.balanceOf(address(this))),\\n            \\\"Could not transfer token\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x709c8aaddf92769fa6c11593ad7d1e78c4b226b082785a728d8a79141853cfe2\",\"license\":\"MIT\"},\"contracts/interfaces/IStakeVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IStakeVault {\\n    function _deposit(address _user, address _token, uint256 _amount) external;\\n\\n    function _withdraw(\\n        address _user,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _yieldEarned\\n    ) external;\\n\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf10a504f86d755b7fe8a91b28896a4419b518b50b8a25ece781c24b5edc5590f\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IStakingPositions {\\n    function getStakeToken() external returns (address);\\n\\n    function addAprLockOption(uint16 _apr, uint256 _lockTime) external;\\n\\n    function stake(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _lockOptIndex\\n    ) external;\\n}\\n\",\"keccak256\":\"0x05f84e64cd85565de0b7175432da63839cf2435743fcd77f30c29b73542cf05e\",\"license\":\"MIT\"},\"contracts/owner/Operator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Operator is Ownable {\\n    address private _operator;\\n\\n    event OperatorTransferred(\\n        address indexed previousOperator,\\n        address indexed newOperator\\n    );\\n\\n    constructor() {\\n        _operator = _msgSender();\\n        emit OperatorTransferred(address(0), _operator);\\n    }\\n\\n    function operator() public view returns (address) {\\n        return _operator;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            _operator == _msgSender(),\\n            \\\"operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrOperator() {\\n        require(\\n            _operator == _msgSender() || owner() == _msgSender(),\\n            \\\"operator: caller is not the operator\\\"\\n        );\\n        _;\\n    }\\n\\n    function isOperator() public view returns (bool) {\\n        return _msgSender() == _operator;\\n    }\\n\\n    function transferOperator(address newOperator_) public onlyOwner {\\n        _transferOperator(newOperator_);\\n    }\\n\\n    function _transferOperator(address newOperator_) internal {\\n        require(\\n            newOperator_ != address(0),\\n            \\\"operator: zero address given for new operator\\\"\\n        );\\n        emit OperatorTransferred(address(0), newOperator_);\\n        _operator = newOperator_;\\n    }\\n}\\n\",\"keccak256\":\"0xe3676e8456e682d9f0a5be45de9f810aa4b5cfb636e8408a409f1eeecb078a9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200619a3803806200619a83398101604081905262000034916200019a565b6001600055620000443362000090565b600280546001600160a01b031916339081179091556040516000906000805160206200617a833981519152908290a36200007e81620000e2565b620000898162000090565b50620001cc565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116620001535760405162461bcd60e51b815260206004820152602d60248201527f6f70657261746f723a207a65726f206164647265737320676976656e20666f7260448201526c103732bb9037b832b930ba37b960991b606482015260840160405180910390fd5b6040516001600160a01b038216906000906000805160206200617a833981519152908290a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600060208284031215620001ad57600080fd5b81516001600160a01b0381168114620001c557600080fd5b9392505050565b615f9e80620001dc6000396000f3fe60806040523480156200001157600080fd5b5060043610620001155760003560e01c8063715018a611620000a3578063d769b6f8116200006e578063d769b6f814620002a6578063dca9fedf14620002d2578063f2fde38b14620002e9578063f8d155e0146200030057600080fd5b8063715018a6146200025c5780637d848db214620002665780638da5cb5b146200027d57806397d3b573146200028f57600080fd5b80634456eda211620000e45780634456eda2146200019757806350d86ba714620001b6578063570ca73514620001cd5780635831991f14620001f357600080fd5b806302db2b7a146200011a5780630858dcdc1462000150578063121361aa146200016957806329605e771462000180575b600080fd5b6200013d6200012b36600462001431565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b620001676200016136600462001458565b62000317565b005b620001676200017a36600462001494565b620004cf565b620001676200019136600462001431565b6200065c565b6002546001600160a01b03163314604051901515815260200162000147565b62000167620001c736600462001594565b62000674565b6002546001600160a01b03165b6040516001600160a01b03909116815260200162000147565b6200020a6200020436600462001667565b620007e6565b604080516001600160a01b039a8b1681529990981660208a0152968801959095526060870193909352608086019190915260a085015260c084015260e083015215156101008201526101200162000147565b6200016762000852565b620001676200027736600462001681565b6200086a565b6001546001600160a01b0316620001da565b62000167620002a0366004620016c5565b62000947565b620001da620002b736600462001431565b6005602052600090815260409020546001600160a01b031681565b62000167620002e336600462001458565b62000a5b565b62000167620002fa36600462001431565b62000bf8565b620001676200031136600462001703565b62000c74565b6002546001600160a01b03163314806200033b57506001546001600160a01b031633145b620003635760405162461bcd60e51b81526004016200035a906200174e565b60405180910390fd5b6000600484815481106200037b576200037b62001792565b90600052602060002090600902016002015411620003ad5760405162461bcd60e51b81526004016200035a90620017a8565b600060048481548110620003c557620003c562001792565b6000918252602090912060099091020180546040516323b872dd60e01b81526001600160a01b0385811660048301523060248301526044820187905292935091169081906323b872dd906064016020604051808303816000875af115801562000432573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004589190620017d6565b620004775760405162461bcd60e51b81526004016200035a90620017f6565b838260070160008282546200048d919062001843565b909155505060405184815285907fe5e9cfeede9ff1fc77b415bf8346e29706d16794b3bdeca347ac54a7fd3e0c3c906020015b60405180910390a25050505050565b620004da3362000e62565b80620004f057506001546001600160a01b031633145b620005275760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064016200035a565b33600090815260066020526040812054600480549192918390811062000551576200055162001792565b90600052602060002090600902019050828160040160008282546200057791906200185f565b90915550506040518381526001600160a01b038516907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a26040516323b872dd60e01b81526001600160a01b038681166004830152306024830152604482018590528516906323b872dd906064016020604051808303816000875af115801562000610573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006369190620017d6565b620006555760405162461bcd60e51b81526004016200035a90620017f6565b5050505050565b6200066662000edd565b620006718162000f39565b50565b6200067e62000edd565b620006898562000fff565b15620006f65760405162461bcd60e51b815260206004820152603560248201527f5374616b6520616c72656164792065786973747320666f7220746869732061736044820152741cd95d0b081c1b19585cd9481d5c19185d19481a5d605a1b60648201526084016200035a565b6000878787308888886040516200070d906200140d565b6200071f9796959493929190620018bd565b604051809103906000f0801580156200073c573d6000803e3d6000fd5b5090506200074d868286866200106d565b81156200075f576200075f8162001229565b806001600160a01b031663f2fde38b620007816001546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015620007c357600080fd5b505af1158015620007d8573d6000803e3d6000fd5b505050505050505050505050565b60048181548110620007f757600080fd5b60009182526020909120600990910201805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b0397881699509690951696939592949193909260ff1689565b6200085c62000edd565b620008686000620013bb565b565b6200087462000edd565b6000600485815481106200088c576200088c62001792565b90600052602060002090600902016002015411620008be5760405162461bcd60e51b81526004016200035a90620017a8565b600060048581548110620008d657620008d662001792565b6000918252602091829020600990910201600381018690556006810185905560088101805460ff191685151590811790915560408051888152938401879052830152915085907fa6f88a8445931d6b529a698670508303a971e39660d8e73f5ee2b18517fb9f1b90606001620004c0565b6200095162000edd565b6040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb90839083906370a0823190602401602060405180830381865afa158015620009a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c691906200192a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801562000a12573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a389190620017d6565b62000a575760405162461bcd60e51b81526004016200035a90620017f6565b5050565b6002546001600160a01b031633148062000a7f57506001546001600160a01b031633145b62000a9e5760405162461bcd60e51b81526004016200035a906200174e565b60006004848154811062000ab65762000ab662001792565b9060005260206000209060090201600201541162000ae85760405162461bcd60e51b81526004016200035a90620017a8565b60006004848154811062000b005762000b0062001792565b906000526020600020906009020190508281600701600082825462000b2691906200185f565b9091555050805460405163a9059cbb60e01b81526001600160a01b0384811660048301526024820186905290911690819063a9059cbb906044016020604051808303816000875af115801562000b80573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ba69190620017d6565b62000bc55760405162461bcd60e51b81526004016200035a90620017f6565b847fcbbfe903010163b2e4bb69941762cc2f49ba81cf7b571811ef70743a03d385d785604051620004c091815260200190565b62000c0262000edd565b6001600160a01b03811662000c695760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200035a565b6200067181620013bb565b62000c7f3362000e62565b8062000c9557506001546001600160a01b031633145b62000ccc5760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064016200035a565b33600090815260066020526040812054600480549192918390811062000cf65762000cf662001792565b90600052602060002090600902019050600081600201541162000d2d5760405162461bcd60e51b81526004016200035a90620017a8565b8381600401600082825462000d43919062001843565b925050819055508281600501600082825462000d6091906200185f565b90915550506001600160a01b0385167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436462000d9c85876200185f565b60405190815260200160405180910390a26001600160a01b03851663a9059cbb8762000dc986886200185f565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801562000e15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e3b9190620017d6565b62000e5a5760405162461bcd60e51b81526004016200035a90620017f6565b505050505050565b600454600090815b8181101562000ed357836001600160a01b03166004828154811062000e935762000e9362001792565b60009182526020909120600160099092020101546001600160a01b03160362000ec0575060019392505050565b62000ecb8162001944565b905062000e6a565b5060009392505050565b6001546001600160a01b03163314620008685760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200035a565b6001600160a01b03811662000fa75760405162461bcd60e51b815260206004820152602d60248201527f6f70657261746f723a207a65726f206164647265737320676976656e20666f7260448201526c103732bb9037b832b930ba37b960991b60648201526084016200035a565b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600454600090815b8181101562000ed357836001600160a01b03166004828154811062001030576200103062001792565b60009182526020909120600990910201546001600160a01b0316036200105a575060019392505050565b620010658162001944565b905062001007565b6004604051806101200160405280866001600160a01b03168152602001856001600160a01b0316815260200142815260200184815260200160008152602001600081526020018381526020016000815260200160011515815250908060018154018082558091505060019003906000526020600020906009020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff02191690831515021790555050508260056000866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160048054905062001207919062001843565b6001600160a01b03909416600090815260066020526040902093909355505050565b604051627b7a3760e21b815261039860048201526276a70060248201526001600160a01b038216906301ede8dc90604401600060405180830381600087803b1580156200127557600080fd5b505af11580156200128a573d6000803e3d6000fd5b5050604051627b7a3760e21b81526105d2600482015262ed4e0060248201526001600160a01b03841692506301ede8dc9150604401600060405180830381600087803b158015620012da57600080fd5b505af1158015620012ef573d6000803e3d6000fd5b5050604051627b7a3760e21b815261087a6004820152630163f50060248201526001600160a01b03841692506301ede8dc9150604401600060405180830381600087803b1580156200134057600080fd5b505af115801562001355573d6000803e3d6000fd5b5050604051627b7a3760e21b8152610ba460048201526301da9c0060248201526001600160a01b03841692506301ede8dc9150604401600060405180830381600087803b158015620013a657600080fd5b505af115801562000655573d6000803e3d6000fd5b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b614608806200196183390190565b6001600160a01b03811681146200067157600080fd5b6000602082840312156200144457600080fd5b813562001451816200141b565b9392505050565b6000806000606084860312156200146e57600080fd5b8335925060208401359150604084013562001489816200141b565b809150509250925092565b600080600060608486031215620014aa57600080fd5b8335620014b7816200141b565b92506020840135620014c9816200141b565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200150257600080fd5b813567ffffffffffffffff80821115620015205762001520620014da565b604051601f8301601f19908116603f011681019082821181831017156200154b576200154b620014da565b816040528381528660208588010111156200156557600080fd5b836020870160208301376000602085830101528094505050505092915050565b80151581146200067157600080fd5b600080600080600080600060e0888a031215620015b057600080fd5b873567ffffffffffffffff80821115620015c957600080fd5b620015d78b838c01620014f0565b985060208a0135915080821115620015ee57600080fd5b620015fc8b838c01620014f0565b975060408a0135915062001610826200141b565b909550606089013590808211156200162757600080fd5b50620016368a828b01620014f0565b9450506080880135925060a0880135915060c0880135620016578162001585565b8091505092959891949750929550565b6000602082840312156200167a57600080fd5b5035919050565b600080600080608085870312156200169857600080fd5b8435935060208501359250604085013591506060850135620016ba8162001585565b939692955090935050565b60008060408385031215620016d957600080fd5b8235620016e6816200141b565b91506020830135620016f8816200141b565b809150509250929050565b600080600080608085870312156200171a57600080fd5b843562001727816200141b565b9350602085013562001739816200141b565b93969395505050506040820135916060013590565b60208082526024908201527f6f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260408201526330ba37b960e11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60208082526014908201527314dd185ad948191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b600060208284031215620017e957600080fd5b8151620014518162001585565b6020808252601e908201527f546f6b656e20636f756c64206e6f74206265207472616e736665727265640000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156200185957620018596200182d565b92915050565b808201808211156200185957620018596200182d565b6000815180845260005b818110156200189d576020818501810151868301820152016200187f565b506000602082860101526020601f19601f83011685010191505092915050565b60e081526000620018d260e083018a62001875565b8281036020840152620018e6818a62001875565b6001600160a01b038981166040860152881660608501528381036080850152905062001913818762001875565b60a0840195909552505060c0015295945050505050565b6000602082840312156200193d57600080fd5b5051919050565b6000600182016200195957620019596200182d565b506001019056fe6080604052660aa87bee538000601855662386f26fc100006019556001601a553480156200002c57600080fd5b5060405162004608380380620046088339810160408190526200004f9162000376565b868660006200005f8382620004cf565b5060016200006e8282620004cf565b5050506200008b620000856200018660201b60201c565b6200018a565b600b80546001600160a01b03191633908117909155604051600090600080516020620045e8833981519152908290a3600c80546001600160a01b0319166001600160a01b0387161790556012620000e38482620004cf565b50600d80546001600160a01b0319166001600160a01b038616908117909155601b839055601c82905560408051638da5cb5b60e01b81529051620001799291638da5cb5b9160048083019260209291908290030181865afa1580156200014d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017391906200059b565b620001dc565b50505050505050620005c0565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166200024d5760405162461bcd60e51b815260206004820152602d60248201527f6f70657261746f723a207a65726f206164647265737320676976656e20666f7260448201526c103732bb9037b832b930ba37b960991b606482015260840160405180910390fd5b6040516001600160a01b03821690600090600080516020620045e8833981519152908290a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002bc57600080fd5b81516001600160401b0380821115620002d957620002d962000294565b604051601f8301601f19908116603f0116810190828211818310171562000304576200030462000294565b816040528381526020925086838588010111156200032157600080fd5b600091505b8382101562000345578582018301518183018401529082019062000326565b600093810190920192909252949350505050565b80516001600160a01b03811681146200037157600080fd5b919050565b600080600080600080600060e0888a0312156200039257600080fd5b87516001600160401b0380821115620003aa57600080fd5b620003b88b838c01620002aa565b985060208a0151915080821115620003cf57600080fd5b620003dd8b838c01620002aa565b9750620003ed60408b0162000359565b9650620003fd60608b0162000359565b955060808a01519150808211156200041457600080fd5b50620004238a828b01620002aa565b93505060a0880151915060c0880151905092959891949750929550565b600181811c908216806200045557607f821691505b6020821081036200047657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004ca57600081815260208120601f850160051c81016020861015620004a55750805b601f850160051c820191505b81811015620004c657828155600101620004b1565b5050505b505050565b81516001600160401b03811115620004eb57620004eb62000294565b6200050381620004fc845462000440565b846200047c565b602080601f8311600181146200053b5760008415620005225750858301515b600019600386901b1c1916600185901b178555620004c6565b600085815260208120601f198616915b828110156200056c578886015182559484019460019091019084016200054b565b50858210156200058b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620005ae57600080fd5b620005b98262000359565b9392505050565b61401880620005d06000396000f3fe608060405234801561001057600080fd5b50600436106103a45760003560e01c80637869684c116101e9578063b4f0c8301161010f578063e92f6a15116100ad578063f2fde38b1161007c578063f2fde38b1461089c578063fab1e747146108af578063fbfa77cf146108b8578063ffa80136146108cb57600080fd5b8063e92f6a1514610827578063e985e9c51461083a578063ed44e56914610876578063eeb90ba91461088957600080fd5b8063d17b9e77116100e9578063d17b9e7714610773578063d1c6b0ca14610786578063d5a44f8614610799578063e8a3d4851461081f57600080fd5b8063b4f0c8301461072a578063b88d4fde1461074d578063c87b56dd1461076057600080fd5b806395d89b4111610187578063a49991f311610156578063a49991f3146106db578063a6bba767146106ee578063ad63db3d14610701578063afd50d8f1461070a57600080fd5b806395d89b411461069857806397d3b573146106a057806399bbbbac146106b3578063a22cb465146106c857600080fd5b80638da5cb5b116101c35780638da5cb5b1461064e5780638f96a7cb1461065f57806390e783281461067257806391915ef81461068557600080fd5b80637869684c146106205780637974e46a146106335780637b0472f01461063b57600080fd5b806338d07436116102ce57806355f804b31161026c57806364ed320d1161023b57806364ed320d146105d257806370a08231146105e5578063715018a6146105f857806376772cf81461060057600080fd5b806355f804b314610592578063570ca735146105a55780635cfc1a51146105b65780636352211e146105bf57600080fd5b80634456eda2116102a85780634456eda2146105365780634670dd2d146105495780634752f9ef1461055c5780634f6ccce71461057f57600080fd5b806338d07436146104fd57806338f57ff31461051057806342842e0e1461052357600080fd5b806318160ddd11610346578063274de61e11610315578063274de61e146104ae57806329605e77146104ce5780632f745c59146104e15780633197cbb6146104f457600080fd5b806318160ddd1461046d57806320e3fa50146104755780632374346c1461048857806323b872dd1461049b57600080fd5b806306fdde031161038257806306fdde0314610407578063081812fc1461041c57806308b7424514610447578063095ea7b31461045a57600080fd5b806301ede8dc146103a957806301ffc9a7146103be57806304ece583146103e6575b600080fd5b6103bc6103b7366004613573565b6108eb565b005b6103d16103cc3660046135b3565b610a0d565b60405190151581526020015b60405180910390f35b6103f96103f43660046135d0565b610a1e565b6040519081526020016103dd565b61040f610af7565b6040516103dd9190613639565b61042f61042a3660046135d0565b610b89565b6040516001600160a01b0390911681526020016103dd565b6103bc61045536600461365a565b610bb0565b6103bc61046836600461369f565b610c08565b6008546103f9565b6103f961048336600461369f565b610d1d565b6103bc6104963660046135d0565b610d4e565b6103bc6104a93660046136bd565b610ecf565b6103f96104bc3660046135d0565b60146020526000908152604090205481565b6103bc6104dc3660046136fe565b610f00565b6103f96104ef36600461369f565b610f14565b6103f9601c5481565b6103bc61050b36600461365a565b610faa565b6103bc61051e36600461371b565b611316565b6103bc6105313660046136bd565b6114ad565b600b546001600160a01b031633146103d1565b6103bc610557366004613754565b6114c8565b6103d161056a3660046135d0565b60106020526000908152604090205460ff1681565b6103f961058d3660046135d0565b61166e565b6103bc6105a0366004613828565b611701565b600b546001600160a01b031661042f565b6103f9601b5481565b61042f6105cd3660046135d0565b611757565b6103f96105e03660046135d0565b6117b7565b6103f96105f33660046136fe565b611855565b6103bc6118db565b6103f961060e3660046135d0565b60156020526000908152604090205481565b6103bc61062e3660046135d0565b6118ef565b6103f961192a565b6103bc610649366004613871565b61193a565b600a546001600160a01b031661042f565b6103d161066d3660046135d0565b61194e565b6103bc6106803660046135d0565b61196d565b6103bc6106933660046135d0565b6119a8565b61040f6119e3565b6103bc6106ae366004613893565b6119f2565b6106bb611b6d565b6040516103dd91906138c1565b6103bc6106d6366004613914565b611bdd565b6103f96106e93660046135d0565b611be8565b6103bc6106fc3660046139c2565b611c8e565b6103f9601e5481565b6103f96107183660046135d0565b60166020526000908152604090205481565b6103d16107383660046136fe565b60176020526000908152604090205460ff1681565b6103bc61075b366004613a1b565b611cd6565b61040f61076e3660046135d0565b611d08565b6103bc6107813660046135d0565b611d9e565b6103bc6107943660046135d0565b611eff565b6107e76107a73660046135d0565b600f60205260009081526040902080546001820154600283015460038401546004909401549293919261ffff909116919060ff8082169161010090041686565b60408051968752602087019590955261ffff9093169385019390935260608401529015156080830152151560a082015260c0016103dd565b61040f611f3a565b6103bc610835366004613a9b565b611f68565b6103d1610848366004613893565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103bc610884366004613ad0565b6120ac565b6103bc610897366004613754565b6120ed565b6103bc6108aa3660046136fe565b612168565b6103f9601d5481565b600d5461042f906001600160a01b031681565b6108de6108d93660046136fe565b6121de565b6040516103dd9190613b17565b600d546001600160a01b031633148061091d575033610912600a546001600160a01b031690565b6001600160a01b0316145b6109425760405162461bcd60e51b815260040161093990613b5b565b60405180910390fd5b6040805180820190915261ffff808416825260208201838152600e805460018101825560009190915292517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd6002909402938401805461ffff19169190931617909155517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe909101558161ffff167fe01fdf33dfdfd42d6dc9b85e62d6750214967dddff00304f34c3fed1939bde0b82604051610a0191815260200190565b60405180910390a25050565b6000610a188261224a565b92915050565b6000818152600f60209081526040808320815160c0810183528154808252600183015494820194909452600282015461ffff1692810192909252600381015460608301526004015460ff8082161515608084015261010090910416151560a0820152908290610a8d9042613b91565b905060008260600151821115610aa857506060820151610aab565b50805b6301e1338061271061ffff1682856040015161ffff168660200151610ad09190613ba4565b610ada9190613ba4565b610ae49190613bd1565b610aee9190613bd1565b95945050505050565b606060008054610b0690613be5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3290613be5565b8015610b7f5780601f10610b5457610100808354040283529160200191610b7f565b820191906000526020600020905b815481529060010190602001808311610b6257829003601f168201915b5050505050905090565b6000610b948261226f565b506000908152600460205260409020546001600160a01b031690565b610bb86122ce565b600082815260106020908152604091829020805460ff1916841515908117909155915191825283917fd07a67329d87579b1994579e69a7e1df196e41e2c912c37b7b9d80ef0030238d9101610a01565b6000610c1382611757565b9050806001600160a01b0316836001600160a01b031603610c805760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610939565b336001600160a01b0382161480610c9c5750610c9c8133610848565b610d0e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610939565b610d188383612328565b505050565b60136020528160005260406000208181548110610d3957600080fd5b90600052602060002001600091509150505481565b600d546001600160a01b0316331480610d80575033610d75600a546001600160a01b031690565b6001600160a01b0316145b610d9c5760405162461bcd60e51b815260040161093990613b5b565b6000600e8281548110610db157610db1613c1f565b600091825260209182902060408051808201909152600290920201805461ffff16825260019081015492820192909252600e805491935091610df291613b91565b81548110610e0257610e02613c1f565b9060005260206000209060020201600e8381548110610e2357610e23613c1f565b600091825260209091208254600290920201805461ffff191661ffff909216919091178155600191820154910155600e805480610e6257610e62613c35565b6000828152602080822060026000199490940193840201805461ffff1916815560010191909155915581518282015160405190815261ffff9091169184917f31c7ae07732186951f28c3aa4b019b67ff0b121028ec0baa0127467a57d3d340910160405180910390a35050565b610ed93382612396565b610ef55760405162461bcd60e51b815260040161093990613c4b565b610d18838383612415565b610f086122ce565b610f11816125c2565b50565b6000610f1f83611855565b8210610f815760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610939565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6000828152600f6020908152604091829020825160c08101845281548152600182015492810192909252600281015461ffff16928201929092526003820154606082015260049091015460ff8082161515608084015261010090910416151560a0820152339061101984611757565b6001600160a01b0316826001600160a01b0316146110915760405162461bcd60e51b815260206004820152602f60248201527f6f6e6c7920746865206f776e6572206f6620746865207374616b656420746f6b60448201526e656e732063616e20756e7374616b6560881b6064820152608401610939565b606081015181516000916110a491613c99565b42109050801561124c5781608001516111185760405162461bcd60e51b815260206004820152603060248201527f5468697320706f736974696f6e206973206e6f7420656c696769626c6520666f60448201526f72206561726c7920776974686472617760801b6064820152608401610939565b8361118b5760405162461bcd60e51b815260206004820152603960248201527f4d7573742061636b6e6f776c6564676520746865206561726c7920776974686460448201527f7261772064756520746f206c6f7373206f6620746f6b656e73000000000000006064820152608401610939565b600d54600c5460208401516001600160a01b039283169263f8d155e09287929116906111b990600290613bd1565b60006040518563ffffffff1660e01b81526004016111da9493929190613cac565b600060405180830381600087803b1580156111f457600080fd5b505af1158015611208573d6000803e3d6000fd5b5050604080516000808252600160208301528183015290518893506001600160a01b0387169250600080516020613fc38339815191529181900360600190a3611306565b600061125786610a1e565b600d54600c5460208601516040516307c68aaf60e51b81529394506001600160a01b039283169363f8d155e093611297938a939116918790600401613cac565b600060405180830381600087803b1580156112b157600080fd5b505af11580156112c5573d6000803e3d6000fd5b5050604080516000808252602082018190528183015290518993506001600160a01b0388169250600080516020613fc38339815191529181900360600190a3505b61130f85612686565b5050505050565b3360009081526017602052604090205460ff161561136f5760405162461bcd60e51b8152602060048201526016602482015275109bdb9d5cc8185b1c9958591e481c9958d95a5d995960521b6044820152606401610939565b6019548310156113c15760405162461bcd60e51b815260206004820152601860248201527f4d757374207374616b65206c617267657220616d6f756e7400000000000000006044820152606401610939565b6113d13384846001600080612735565b336000818152601760205260408120805460ff19166001179055601854601a546113fd93928080612735565b61141181601854601a546000806000612735565b601854601a5460405133927feaaedb2f797ad9311d3350873d350ad04080ad6baa897e9cd8b891bf151f3a5e9261145092918252602082015260400190565b60405180910390a2806001600160a01b03167feaaedb2f797ad9311d3350873d350ad04080ad6baa897e9cd8b891bf151f3a5e601854601a546040516114a0929190918252602082015260400190565b60405180910390a2505050565b610d1883838360405180602001604052806000815250611cd6565b60008281526010602052604090205460ff16156115195760405162461bcd60e51b815260206004820152600f60248201526e189b1858dadb1a5cdd195908139195608a1b6044820152606401610939565b61152282611757565b6001600160a01b0316836001600160a01b03161461153f57600080fd5b6000828152600f6020908152604091829020825160c0810184528154808252600183015493820193909352600282015461ffff169381019390935260038101546060840181905260049091015460ff8082161515608086015261010090910416151560a08401526115af91613c99565b42116115fd5760405162461bcd60e51b815260206004820152601b60248201527f506f736974696f6e206973206e6f74206174206d6174757269747900000000006044820152606401610939565b600061160884610a1e565b905061161384612686565b604080516001815260006020820181905281830152905185916001600160a01b03881691600080516020613fc38339815191529181900360600190a361130f858284602001516116639190613c99565b856000600180612735565b600061167960085490565b82106116dc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610939565b600882815481106116ef576116ef613c1f565b90600052602060002001549050919050565b6117096122ce565b60126117158282613d23565b50806040516117249190613de3565b604051908190038120907f199e933997358e1789d8b56ea8c551befeb05ce2fe3fe506199f1230f5a591b490600090a250565b6000818152600260205260408120546001600160a01b031680610a185760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610939565b6000818152600f60209081526040808320815160c081018352815481526001820154938101849052600282015461ffff1692810183905260038201546060820181905260049092015460ff8082161515608084015261010090910416151560a0820152926301e133809261271092916118309190613ba4565b61183a9190613ba4565b6118449190613bd1565b61184e9190613bd1565b9392505050565b60006001600160a01b0382166118bf5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610939565b506001600160a01b031660009081526003602052604090205490565b6118e36122ce565b6118ed6000612bc7565b565b6118f76122ce565b601981905560405181907f2ebf7054fda26cce68709eab0e72f86f40153730d994609a775243bd16bd32f890600090a250565b600061193560115490565b905090565b61194a3383836001806000612735565b5050565b6000818152600260205260408120546001600160a01b03161515610a18565b6119756122ce565b601a81905560405181907fab03523d63fc2456e647e1335600dd48f2b3c9645b43f190cc1615863007e4ed90600090a250565b6119b06122ce565b601b81905560405181907f3e90590403178c03ff8343cdb359608fcc7678b15509de56e1be479af1b127be90600090a250565b606060018054610b0690613be5565b600d546001600160a01b0316331480611a24575033611a19600a546001600160a01b031690565b6001600160a01b0316145b611a405760405162461bcd60e51b815260040161093990613b5b565b6040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb90839083906370a0823190602401602060405180830381865afa158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab29190613dff565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b219190613e18565b61194a5760405162461bcd60e51b815260206004820152601860248201527f436f756c64206e6f74207472616e7366657220746f6b656e00000000000000006044820152606401610939565b6060600e805480602002602001604051908101604052809291908181526020016000905b82821015611bd45760008481526020908190206040805180820190915260028502909101805461ffff168252600190810154828401529083529092019101611b91565b50505050905090565b61194a338383612c19565b6000818152600f60209081526040808320815160c081018352815481526001820154938101849052600282015461ffff1692810183905260038201546060820181905260049092015460ff8082161515608084015261010090910416151560a0820152926301e13380926127109291611c619190613ba4565b611c6b9190613ba4565b611c759190613bd1565b611c7f9190613bd1565b816020015161184e9190613c99565b60005b8251811015611cd057611cbe84848381518110611cb057611cb0613c1f565b6020026020010151846114c8565b80611cc881613e35565b915050611c91565b50505050565b611ce03383612396565b611cfc5760405162461bcd60e51b815260040161093990613c4b565b611cd084848484612ce7565b6000818152600260205260409020546060906001600160a01b0316611d665760405162461bcd60e51b81526020600482015260146024820152731d1bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610939565b611d6e612d1a565b611d7783612d29565b604051602001611d88929190613e4e565b6040516020818303038152906040529050919050565b600b546001600160a01b0316331480611dc15750600a546001600160a01b031633145b611ddd5760405162461bcd60e51b815260040161093990613e8d565b6000818152600f60209081526040808320815160c08101835281548152600182015493810193909352600281015461ffff1691830191909152600381015460608301526004015460ff8082161515608084015261010090910416151560a082015290611e4883611757565b600d54600c5460208501516040516307c68aaf60e51b81529394506001600160a01b039283169363f8d155e093611e89938793911691600090600401613cac565b600060405180830381600087803b158015611ea357600080fd5b505af1158015611eb7573d6000803e3d6000fd5b5050604080516000808252602082015260018183015290518693506001600160a01b0385169250600080516020613fc38339815191529181900360600190a3610d1883612686565b611f076122ce565b601881905560405181907f489c861b26977ea518d7106a69d4254fbe2c3cfb9cbf5ca4f7784058ec1c6ba490600090a250565b6060611f44612d1a565b604051602001611f549190613ed1565b604051602081830303815290604052905090565b600d546001600160a01b0316331480611f9a575033611f8f600a546001600160a01b031690565b6001600160a01b0316145b611fb65760405162461bcd60e51b815260040161093990613b5b565b6000600e8481548110611fcb57611fcb613c1f565b60009182526020918290206040805180820182526002909302909101805461ffff908116845260019091015483850152815180830190925286168152918201849052600e8054919350908690811061202557612025613c1f565b6000918252602091829020835160029290920201805461ffff191661ffff9283161781559282015160019093019290925582518382015160408051918252878516938201939093529182018590529091169085907f1d66929984041b98ee2942b02ecb1a94419d54cf725b2fff115bb7a6039a96c69060600160405180910390a350505050565b60005b8251811015610d18576120db8382815181106120cd576120cd613c1f565b602002602001015183610faa565b806120e581613e35565b9150506120af565b600b546001600160a01b031633146121175760405162461bcd60e51b815260040161093990613e8d565b6121278383836000806000612735565b60408051838152602081018390526001600160a01b038516917f39411aa5454233dea52e69983fc74412c7abbe65976705dc07402ecdcb3a768b91016114a0565b6121706122ce565b6001600160a01b0381166121d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610939565b610f1181612bc7565b6001600160a01b03811660009081526013602090815260409182902080548351818402810184019094528084526060939283018282801561223e57602002820191906000526020600020905b81548152602001906001019080831161222a575b50505050509050919050565b60006001600160e01b0319821663780e9d6360e01b1480610a185750610a1882612e2a565b6000818152600260205260409020546001600160a01b0316610f115760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610939565b600a546001600160a01b031633146118ed5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610939565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061235d82611757565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806123a283611757565b9050806001600160a01b0316846001600160a01b031614806123e957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061240d5750836001600160a01b031661240284610b89565b6001600160a01b0316145b949350505050565b826001600160a01b031661242882611757565b6001600160a01b03161461248c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610939565b6001600160a01b0382166124ee5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610939565b6124f9838383612e7a565b612504600082612328565b6001600160a01b038316600090815260036020526040812080546001929061252d908490613b91565b90915550506001600160a01b038216600090815260036020526040812080546001929061255b908490613c99565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4610d18838383612ee7565b6001600160a01b03811661262e5760405162461bcd60e51b815260206004820152602d60248201527f6f70657261746f723a207a65726f206164647265737320676976656e20666f7260448201526c103732bb9037b832b930ba37b960991b6064820152608401610939565b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600061269182611757565b905061269f81600084612e7a565b6126aa600083612328565b6001600160a01b03811660009081526003602052604081208054600192906126d3908490613b91565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a461194a81600084612ee7565b600e54841061277c5760405162461bcd60e51b815260206004820152601360248201527234b73b30b634b2103637b1b59037b83a34b7b760691b6044820152606401610939565b841561278857846127f6565b600c546040516370a0823160e01b81526001600160a01b038881166004830152909116906370a0823190602401602060405180830381865afa1580156127d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f69190613dff565b94506000851161285f5760405162461bcd60e51b815260206004820152602e60248201527f6d757374207374616b6520616e64206265206561726e696e67206174206c656160448201526d737420736f6d6520746f6b656e7360901b6064820152608401610939565b601b54601d5461286f9087613c99565b11158061287c5750601b54155b6128b85760405162461bcd60e51b815260206004820152600d60248201526c4f76657220636170616369747960981b6044820152606401610939565b601c54421115806128c95750601c54155b6129095760405162461bcd60e51b815260206004820152601160248201527029ba30b5b2903832b934b7b21037bb32b960791b6044820152606401610939565b84601d600082825461291b9190613c99565b909155505060118054600101905560006301e1338061271061ffff16600e878154811061294a5761294a613c1f565b906000526020600020906002020160010154600e888154811061296f5761296f613c1f565b600091825260209091206002909102015461298e9061ffff168a613ba4565b6129989190613ba4565b6129a29190613bd1565b6129ac9190613bd1565b905080601e60008282546129c09190613c99565b90915550508315612a3c57600d54600c54604051630909b0d560e11b81526001600160a01b038a8116600483015291821660248201526044810189905291169063121361aa90606401600060405180830381600087803b158015612a2357600080fd5b505af1158015612a37573d6000803e3d6000fd5b505050505b6040518060c00160405280428152602001878152602001600e8781548110612a6657612a66613c1f565b60009182526020918290206002909102015461ffff168252600e8054929091019188908110612a9757612a97613c1f565b90600052602060002090600202016001015481526020018415158152602001851515815250600f6000612ac960115490565b815260208082019290925260409081016000208351815591830151600183015582015160028201805461ffff90921661ffff199283161790556060830151600383015560808301516004909201805460a09094015115156101000261ff0019931515939093169390911692909217179055612b4c87612b4760115490565b613070565b4260156000612b5a60115490565b81526020810191909152604001600020556011546040805188815260208101889052841515918101919091526001600160a01b038916907fa49c1c928980f2db155623150cf810e7c643408e6f25c3b315d0e2c476a076dd9060600160405180910390a350505050505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603612c7a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610939565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612cf2848484612415565b612cfe8484848461308a565b611cd05760405162461bcd60e51b815260040161093990613f02565b606060128054610b0690613be5565b606081600003612d505750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612d7a5780612d6481613e35565b9150612d739050600a83613bd1565b9150612d54565b60008167ffffffffffffffff811115612d9557612d95613789565b6040519080825280601f01601f191660200182016040528015612dbf576020820181803683370190505b5090505b841561240d57612dd4600183613b91565b9150612de1600a86613f54565b612dec906030613c99565b60f81b818381518110612e0157612e01613c1f565b60200101906001600160f81b031916908160001a905350612e23600a86613bd1565b9450612dc3565b60006001600160e01b031982166380ac58cd60e01b1480612e5b57506001600160e01b03198216635b5e139f60e01b145b80610a1857506301ffc9a760e01b6001600160e01b0319831614610a18565b60008181526010602052604090205460ff1615612ecb5760405162461bcd60e51b815260206004820152600f60248201526e189b1858dadb1a5cdd195908139195608a1b6044820152606401610939565b6000818152601660205260409020429055610d1883838361318b565b6001600160a01b03831615613021576000818152601460209081526040808320546001600160a01b0387168452601390925282208054919291612f2c90600190613b91565b81548110612f3c57612f3c613c1f565b60009182526020808320909101546001600160a01b038816835260139091526040909120805491925090612f7290600190613b91565b81548110612f8257612f82613c1f565b906000526020600020015460136000876001600160a01b03166001600160a01b031681526020019081526020016000208381548110612fc357612fc3613c1f565b60009182526020808320909101929092556001600160a01b0387168152601390915260409020805480612ff857612ff8613c35565b600082815260208082208301600019908101839055909201909255918152601490915260409020555b6001600160a01b03821615610d18576001600160a01b03919091166000908152601360208181526040808420805486865260148452918520829055928252600181018355918352909120015550565b61194a828260405180602001604052806000815250613243565b60006001600160a01b0384163b1561318057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906130ce903390899088908890600401613f68565b6020604051808303816000875af1925050508015613109575060408051601f3d908101601f1916820190925261310691810190613fa5565b60015b613166573d808015613137576040519150601f19603f3d011682016040523d82523d6000602084013e61313c565b606091505b50805160000361315e5760405162461bcd60e51b815260040161093990613f02565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061240d565b506001949350505050565b6001600160a01b0383166131e6576131e181600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613209565b816001600160a01b0316836001600160a01b031614613209576132098382613276565b6001600160a01b03821661322057610d1881613313565b826001600160a01b0316826001600160a01b031614610d1857610d1882826133c2565b61324d8383613406565b61325a600084848461308a565b610d185760405162461bcd60e51b815260040161093990613f02565b6000600161328384611855565b61328d9190613b91565b6000838152600760205260409020549091508082146132e0576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061332590600190613b91565b6000838152600960205260408120546008805493945090928490811061334d5761334d613c1f565b90600052602060002001549050806008838154811061336e5761336e613c1f565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806133a6576133a6613c35565b6001900381819060005260206000200160009055905550505050565b60006133cd83611855565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661345c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610939565b6000818152600260205260409020546001600160a01b0316156134c15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610939565b6134cd60008383612e7a565b6001600160a01b03821660009081526003602052604081208054600192906134f6908490613c99565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a461194a60008383612ee7565b803561ffff8116811461356e57600080fd5b919050565b6000806040838503121561358657600080fd5b61358f8361355c565b946020939093013593505050565b6001600160e01b031981168114610f1157600080fd5b6000602082840312156135c557600080fd5b813561184e8161359d565b6000602082840312156135e257600080fd5b5035919050565b60005b838110156136045781810151838201526020016135ec565b50506000910152565b600081518084526136258160208601602086016135e9565b601f01601f19169290920160200192915050565b60208152600061184e602083018461360d565b8015158114610f1157600080fd5b6000806040838503121561366d57600080fd5b82359150602083013561367f8161364c565b809150509250929050565b6001600160a01b0381168114610f1157600080fd5b600080604083850312156136b257600080fd5b823561358f8161368a565b6000806000606084860312156136d257600080fd5b83356136dd8161368a565b925060208401356136ed8161368a565b929592945050506040919091013590565b60006020828403121561371057600080fd5b813561184e8161368a565b60008060006060848603121561373057600080fd5b833592506020840135915060408401356137498161368a565b809150509250925092565b60008060006060848603121561376957600080fd5b83356137748161368a565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156137c8576137c8613789565b604052919050565b600067ffffffffffffffff8311156137ea576137ea613789565b6137fd601f8401601f191660200161379f565b905082815283838301111561381157600080fd5b828260208301376000602084830101529392505050565b60006020828403121561383a57600080fd5b813567ffffffffffffffff81111561385157600080fd5b8201601f8101841361386257600080fd5b61240d848235602084016137d0565b6000806040838503121561388457600080fd5b50508035926020909101359150565b600080604083850312156138a657600080fd5b82356138b18161368a565b9150602083013561367f8161368a565b602080825282518282018190526000919060409081850190868401855b82811015613907578151805161ffff1685528601518685015292840192908501906001016138de565b5091979650505050505050565b6000806040838503121561392757600080fd5b82356139328161368a565b9150602083013561367f8161364c565b600082601f83011261395357600080fd5b8135602067ffffffffffffffff82111561396f5761396f613789565b8160051b61397e82820161379f565b928352848101820192828101908785111561399857600080fd5b83870192505b848310156139b75782358252918301919083019061399e565b979650505050505050565b6000806000606084860312156139d757600080fd5b83356139e28161368a565b9250602084013567ffffffffffffffff8111156139fe57600080fd5b613a0a86828701613942565b925050604084013590509250925092565b60008060008060808587031215613a3157600080fd5b8435613a3c8161368a565b93506020850135613a4c8161368a565b925060408501359150606085013567ffffffffffffffff811115613a6f57600080fd5b8501601f81018713613a8057600080fd5b613a8f878235602084016137d0565b91505092959194509250565b600080600060608486031215613ab057600080fd5b83359250613ac06020850161355c565b9150604084013590509250925092565b60008060408385031215613ae357600080fd5b823567ffffffffffffffff811115613afa57600080fd5b613b0685828601613942565b925050602083013561367f8161364c565b6020808252825182820181905260009190848201906040850190845b81811015613b4f57835183529284019291840191600101613b33565b50909695505050505050565b60208082526006908201526510b7bbb732b960d11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a1857610a18613b7b565b8082028115828204841417610a1857610a18613b7b565b634e487b7160e01b600052601260045260246000fd5b600082613be057613be0613bbb565b500490565b600181811c90821680613bf957607f821691505b602082108103613c1957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b80820180821115610a1857610a18613b7b565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b601f821115610d1857600081815260208120601f850160051c81016020861015613cfc5750805b601f850160051c820191505b81811015613d1b57828155600101613d08565b505050505050565b815167ffffffffffffffff811115613d3d57613d3d613789565b613d5181613d4b8454613be5565b84613cd5565b602080601f831160018114613d865760008415613d6e5750858301515b600019600386901b1c1916600185901b178555613d1b565b600085815260208120601f198616915b82811015613db557888601518255948401946001909101908401613d96565b5085821015613dd35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251613df58184602087016135e9565b9190910192915050565b600060208284031215613e1157600080fd5b5051919050565b600060208284031215613e2a57600080fd5b815161184e8161364c565b600060018201613e4757613e47613b7b565b5060010190565b60008351613e608184602088016135e9565b835190830190613e748183602088016135e9565b64173539b7b760d91b9101908152600501949350505050565b60208082526024908201527f6f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260408201526330ba37b960e11b606082015260800190565b60008251613ee38184602087016135e9565b6c31b7b73a3930b1ba173539b7b760991b920191825250600d01919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600082613f6357613f63613bbb565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613f9b9083018461360d565b9695505050505050565b600060208284031215613fb757600080fd5b815161184e8161359d56feddb878cba785b7e990dc6cf5429da531907ba82da43d525a522696e153ea45c6a26469706673582212206fd62b2228b45e933616b95372346d55a5b74df233b961d186cd7edb6e91edc764736f6c6343000811003374da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617eda26469706673582212205dabd1b104bf0699548285dc6448665e4a7f98447870091a4aca478350a37c4164736f6c6343000811003374da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001155760003560e01c8063715018a611620000a3578063d769b6f8116200006e578063d769b6f814620002a6578063dca9fedf14620002d2578063f2fde38b14620002e9578063f8d155e0146200030057600080fd5b8063715018a6146200025c5780637d848db214620002665780638da5cb5b146200027d57806397d3b573146200028f57600080fd5b80634456eda211620000e45780634456eda2146200019757806350d86ba714620001b6578063570ca73514620001cd5780635831991f14620001f357600080fd5b806302db2b7a146200011a5780630858dcdc1462000150578063121361aa146200016957806329605e771462000180575b600080fd5b6200013d6200012b36600462001431565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b620001676200016136600462001458565b62000317565b005b620001676200017a36600462001494565b620004cf565b620001676200019136600462001431565b6200065c565b6002546001600160a01b03163314604051901515815260200162000147565b62000167620001c736600462001594565b62000674565b6002546001600160a01b03165b6040516001600160a01b03909116815260200162000147565b6200020a6200020436600462001667565b620007e6565b604080516001600160a01b039a8b1681529990981660208a0152968801959095526060870193909352608086019190915260a085015260c084015260e083015215156101008201526101200162000147565b6200016762000852565b620001676200027736600462001681565b6200086a565b6001546001600160a01b0316620001da565b62000167620002a0366004620016c5565b62000947565b620001da620002b736600462001431565b6005602052600090815260409020546001600160a01b031681565b62000167620002e336600462001458565b62000a5b565b62000167620002fa36600462001431565b62000bf8565b620001676200031136600462001703565b62000c74565b6002546001600160a01b03163314806200033b57506001546001600160a01b031633145b620003635760405162461bcd60e51b81526004016200035a906200174e565b60405180910390fd5b6000600484815481106200037b576200037b62001792565b90600052602060002090600902016002015411620003ad5760405162461bcd60e51b81526004016200035a90620017a8565b600060048481548110620003c557620003c562001792565b6000918252602090912060099091020180546040516323b872dd60e01b81526001600160a01b0385811660048301523060248301526044820187905292935091169081906323b872dd906064016020604051808303816000875af115801562000432573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004589190620017d6565b620004775760405162461bcd60e51b81526004016200035a90620017f6565b838260070160008282546200048d919062001843565b909155505060405184815285907fe5e9cfeede9ff1fc77b415bf8346e29706d16794b3bdeca347ac54a7fd3e0c3c906020015b60405180910390a25050505050565b620004da3362000e62565b80620004f057506001546001600160a01b031633145b620005275760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064016200035a565b33600090815260066020526040812054600480549192918390811062000551576200055162001792565b90600052602060002090600902019050828160040160008282546200057791906200185f565b90915550506040518381526001600160a01b038516907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a26040516323b872dd60e01b81526001600160a01b038681166004830152306024830152604482018590528516906323b872dd906064016020604051808303816000875af115801562000610573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006369190620017d6565b620006555760405162461bcd60e51b81526004016200035a90620017f6565b5050505050565b6200066662000edd565b620006718162000f39565b50565b6200067e62000edd565b620006898562000fff565b15620006f65760405162461bcd60e51b815260206004820152603560248201527f5374616b6520616c72656164792065786973747320666f7220746869732061736044820152741cd95d0b081c1b19585cd9481d5c19185d19481a5d605a1b60648201526084016200035a565b6000878787308888886040516200070d906200140d565b6200071f9796959493929190620018bd565b604051809103906000f0801580156200073c573d6000803e3d6000fd5b5090506200074d868286866200106d565b81156200075f576200075f8162001229565b806001600160a01b031663f2fde38b620007816001546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b158015620007c357600080fd5b505af1158015620007d8573d6000803e3d6000fd5b505050505050505050505050565b60048181548110620007f757600080fd5b60009182526020909120600990910201805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b0397881699509690951696939592949193909260ff1689565b6200085c62000edd565b620008686000620013bb565b565b6200087462000edd565b6000600485815481106200088c576200088c62001792565b90600052602060002090600902016002015411620008be5760405162461bcd60e51b81526004016200035a90620017a8565b600060048581548110620008d657620008d662001792565b6000918252602091829020600990910201600381018690556006810185905560088101805460ff191685151590811790915560408051888152938401879052830152915085907fa6f88a8445931d6b529a698670508303a971e39660d8e73f5ee2b18517fb9f1b90606001620004c0565b6200095162000edd565b6040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb90839083906370a0823190602401602060405180830381865afa158015620009a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009c691906200192a565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801562000a12573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a389190620017d6565b62000a575760405162461bcd60e51b81526004016200035a90620017f6565b5050565b6002546001600160a01b031633148062000a7f57506001546001600160a01b031633145b62000a9e5760405162461bcd60e51b81526004016200035a906200174e565b60006004848154811062000ab65762000ab662001792565b9060005260206000209060090201600201541162000ae85760405162461bcd60e51b81526004016200035a90620017a8565b60006004848154811062000b005762000b0062001792565b906000526020600020906009020190508281600701600082825462000b2691906200185f565b9091555050805460405163a9059cbb60e01b81526001600160a01b0384811660048301526024820186905290911690819063a9059cbb906044016020604051808303816000875af115801562000b80573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ba69190620017d6565b62000bc55760405162461bcd60e51b81526004016200035a90620017f6565b847fcbbfe903010163b2e4bb69941762cc2f49ba81cf7b571811ef70743a03d385d785604051620004c091815260200190565b62000c0262000edd565b6001600160a01b03811662000c695760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200035a565b6200067181620013bb565b62000c7f3362000e62565b8062000c9557506001546001600160a01b031633145b62000ccc5760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b60448201526064016200035a565b33600090815260066020526040812054600480549192918390811062000cf65762000cf662001792565b90600052602060002090600902019050600081600201541162000d2d5760405162461bcd60e51b81526004016200035a90620017a8565b8381600401600082825462000d43919062001843565b925050819055508281600501600082825462000d6091906200185f565b90915550506001600160a01b0385167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436462000d9c85876200185f565b60405190815260200160405180910390a26001600160a01b03851663a9059cbb8762000dc986886200185f565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801562000e15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e3b9190620017d6565b62000e5a5760405162461bcd60e51b81526004016200035a90620017f6565b505050505050565b600454600090815b8181101562000ed357836001600160a01b03166004828154811062000e935762000e9362001792565b60009182526020909120600160099092020101546001600160a01b03160362000ec0575060019392505050565b62000ecb8162001944565b905062000e6a565b5060009392505050565b6001546001600160a01b03163314620008685760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200035a565b6001600160a01b03811662000fa75760405162461bcd60e51b815260206004820152602d60248201527f6f70657261746f723a207a65726f206164647265737320676976656e20666f7260448201526c103732bb9037b832b930ba37b960991b60648201526084016200035a565b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3600280546001600160a01b0319166001600160a01b0392909216919091179055565b600454600090815b8181101562000ed357836001600160a01b03166004828154811062001030576200103062001792565b60009182526020909120600990910201546001600160a01b0316036200105a575060019392505050565b620010658162001944565b905062001007565b6004604051806101200160405280866001600160a01b03168152602001856001600160a01b0316815260200142815260200184815260200160008152602001600081526020018381526020016000815260200160011515815250908060018154018082558091505060019003906000526020600020906009020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff02191690831515021790555050508260056000866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160048054905062001207919062001843565b6001600160a01b03909416600090815260066020526040902093909355505050565b604051627b7a3760e21b815261039860048201526276a70060248201526001600160a01b038216906301ede8dc90604401600060405180830381600087803b1580156200127557600080fd5b505af11580156200128a573d6000803e3d6000fd5b5050604051627b7a3760e21b81526105d2600482015262ed4e0060248201526001600160a01b03841692506301ede8dc9150604401600060405180830381600087803b158015620012da57600080fd5b505af1158015620012ef573d6000803e3d6000fd5b5050604051627b7a3760e21b815261087a6004820152630163f50060248201526001600160a01b03841692506301ede8dc9150604401600060405180830381600087803b1580156200134057600080fd5b505af115801562001355573d6000803e3d6000fd5b5050604051627b7a3760e21b8152610ba460048201526301da9c0060248201526001600160a01b03841692506301ede8dc9150604401600060405180830381600087803b158015620013a657600080fd5b505af115801562000655573d6000803e3d6000fd5b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b614608806200196183390190565b6001600160a01b03811681146200067157600080fd5b6000602082840312156200144457600080fd5b813562001451816200141b565b9392505050565b6000806000606084860312156200146e57600080fd5b8335925060208401359150604084013562001489816200141b565b809150509250925092565b600080600060608486031215620014aa57600080fd5b8335620014b7816200141b565b92506020840135620014c9816200141b565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200150257600080fd5b813567ffffffffffffffff80821115620015205762001520620014da565b604051601f8301601f19908116603f011681019082821181831017156200154b576200154b620014da565b816040528381528660208588010111156200156557600080fd5b836020870160208301376000602085830101528094505050505092915050565b80151581146200067157600080fd5b600080600080600080600060e0888a031215620015b057600080fd5b873567ffffffffffffffff80821115620015c957600080fd5b620015d78b838c01620014f0565b985060208a0135915080821115620015ee57600080fd5b620015fc8b838c01620014f0565b975060408a0135915062001610826200141b565b909550606089013590808211156200162757600080fd5b50620016368a828b01620014f0565b9450506080880135925060a0880135915060c0880135620016578162001585565b8091505092959891949750929550565b6000602082840312156200167a57600080fd5b5035919050565b600080600080608085870312156200169857600080fd5b8435935060208501359250604085013591506060850135620016ba8162001585565b939692955090935050565b60008060408385031215620016d957600080fd5b8235620016e6816200141b565b91506020830135620016f8816200141b565b809150509250929050565b600080600080608085870312156200171a57600080fd5b843562001727816200141b565b9350602085013562001739816200141b565b93969395505050506040820135916060013590565b60208082526024908201527f6f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260408201526330ba37b960e11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60208082526014908201527314dd185ad948191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b600060208284031215620017e957600080fd5b8151620014518162001585565b6020808252601e908201527f546f6b656e20636f756c64206e6f74206265207472616e736665727265640000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156200185957620018596200182d565b92915050565b808201808211156200185957620018596200182d565b6000815180845260005b818110156200189d576020818501810151868301820152016200187f565b506000602082860101526020601f19601f83011685010191505092915050565b60e081526000620018d260e083018a62001875565b8281036020840152620018e6818a62001875565b6001600160a01b038981166040860152881660608501528381036080850152905062001913818762001875565b60a0840195909552505060c0015295945050505050565b6000602082840312156200193d57600080fd5b5051919050565b6000600182016200195957620019596200182d565b506001019056fe6080604052660aa87bee538000601855662386f26fc100006019556001601a553480156200002c57600080fd5b5060405162004608380380620046088339810160408190526200004f9162000376565b868660006200005f8382620004cf565b5060016200006e8282620004cf565b5050506200008b620000856200018660201b60201c565b6200018a565b600b80546001600160a01b03191633908117909155604051600090600080516020620045e8833981519152908290a3600c80546001600160a01b0319166001600160a01b0387161790556012620000e38482620004cf565b50600d80546001600160a01b0319166001600160a01b038616908117909155601b839055601c82905560408051638da5cb5b60e01b81529051620001799291638da5cb5b9160048083019260209291908290030181865afa1580156200014d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017391906200059b565b620001dc565b50505050505050620005c0565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0381166200024d5760405162461bcd60e51b815260206004820152602d60248201527f6f70657261746f723a207a65726f206164647265737320676976656e20666f7260448201526c103732bb9037b832b930ba37b960991b606482015260840160405180910390fd5b6040516001600160a01b03821690600090600080516020620045e8833981519152908290a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002bc57600080fd5b81516001600160401b0380821115620002d957620002d962000294565b604051601f8301601f19908116603f0116810190828211818310171562000304576200030462000294565b816040528381526020925086838588010111156200032157600080fd5b600091505b8382101562000345578582018301518183018401529082019062000326565b600093810190920192909252949350505050565b80516001600160a01b03811681146200037157600080fd5b919050565b600080600080600080600060e0888a0312156200039257600080fd5b87516001600160401b0380821115620003aa57600080fd5b620003b88b838c01620002aa565b985060208a0151915080821115620003cf57600080fd5b620003dd8b838c01620002aa565b9750620003ed60408b0162000359565b9650620003fd60608b0162000359565b955060808a01519150808211156200041457600080fd5b50620004238a828b01620002aa565b93505060a0880151915060c0880151905092959891949750929550565b600181811c908216806200045557607f821691505b6020821081036200047657634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004ca57600081815260208120601f850160051c81016020861015620004a55750805b601f850160051c820191505b81811015620004c657828155600101620004b1565b5050505b505050565b81516001600160401b03811115620004eb57620004eb62000294565b6200050381620004fc845462000440565b846200047c565b602080601f8311600181146200053b5760008415620005225750858301515b600019600386901b1c1916600185901b178555620004c6565b600085815260208120601f198616915b828110156200056c578886015182559484019460019091019084016200054b565b50858210156200058b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620005ae57600080fd5b620005b98262000359565b9392505050565b61401880620005d06000396000f3fe608060405234801561001057600080fd5b50600436106103a45760003560e01c80637869684c116101e9578063b4f0c8301161010f578063e92f6a15116100ad578063f2fde38b1161007c578063f2fde38b1461089c578063fab1e747146108af578063fbfa77cf146108b8578063ffa80136146108cb57600080fd5b8063e92f6a1514610827578063e985e9c51461083a578063ed44e56914610876578063eeb90ba91461088957600080fd5b8063d17b9e77116100e9578063d17b9e7714610773578063d1c6b0ca14610786578063d5a44f8614610799578063e8a3d4851461081f57600080fd5b8063b4f0c8301461072a578063b88d4fde1461074d578063c87b56dd1461076057600080fd5b806395d89b4111610187578063a49991f311610156578063a49991f3146106db578063a6bba767146106ee578063ad63db3d14610701578063afd50d8f1461070a57600080fd5b806395d89b411461069857806397d3b573146106a057806399bbbbac146106b3578063a22cb465146106c857600080fd5b80638da5cb5b116101c35780638da5cb5b1461064e5780638f96a7cb1461065f57806390e783281461067257806391915ef81461068557600080fd5b80637869684c146106205780637974e46a146106335780637b0472f01461063b57600080fd5b806338d07436116102ce57806355f804b31161026c57806364ed320d1161023b57806364ed320d146105d257806370a08231146105e5578063715018a6146105f857806376772cf81461060057600080fd5b806355f804b314610592578063570ca735146105a55780635cfc1a51146105b65780636352211e146105bf57600080fd5b80634456eda2116102a85780634456eda2146105365780634670dd2d146105495780634752f9ef1461055c5780634f6ccce71461057f57600080fd5b806338d07436146104fd57806338f57ff31461051057806342842e0e1461052357600080fd5b806318160ddd11610346578063274de61e11610315578063274de61e146104ae57806329605e77146104ce5780632f745c59146104e15780633197cbb6146104f457600080fd5b806318160ddd1461046d57806320e3fa50146104755780632374346c1461048857806323b872dd1461049b57600080fd5b806306fdde031161038257806306fdde0314610407578063081812fc1461041c57806308b7424514610447578063095ea7b31461045a57600080fd5b806301ede8dc146103a957806301ffc9a7146103be57806304ece583146103e6575b600080fd5b6103bc6103b7366004613573565b6108eb565b005b6103d16103cc3660046135b3565b610a0d565b60405190151581526020015b60405180910390f35b6103f96103f43660046135d0565b610a1e565b6040519081526020016103dd565b61040f610af7565b6040516103dd9190613639565b61042f61042a3660046135d0565b610b89565b6040516001600160a01b0390911681526020016103dd565b6103bc61045536600461365a565b610bb0565b6103bc61046836600461369f565b610c08565b6008546103f9565b6103f961048336600461369f565b610d1d565b6103bc6104963660046135d0565b610d4e565b6103bc6104a93660046136bd565b610ecf565b6103f96104bc3660046135d0565b60146020526000908152604090205481565b6103bc6104dc3660046136fe565b610f00565b6103f96104ef36600461369f565b610f14565b6103f9601c5481565b6103bc61050b36600461365a565b610faa565b6103bc61051e36600461371b565b611316565b6103bc6105313660046136bd565b6114ad565b600b546001600160a01b031633146103d1565b6103bc610557366004613754565b6114c8565b6103d161056a3660046135d0565b60106020526000908152604090205460ff1681565b6103f961058d3660046135d0565b61166e565b6103bc6105a0366004613828565b611701565b600b546001600160a01b031661042f565b6103f9601b5481565b61042f6105cd3660046135d0565b611757565b6103f96105e03660046135d0565b6117b7565b6103f96105f33660046136fe565b611855565b6103bc6118db565b6103f961060e3660046135d0565b60156020526000908152604090205481565b6103bc61062e3660046135d0565b6118ef565b6103f961192a565b6103bc610649366004613871565b61193a565b600a546001600160a01b031661042f565b6103d161066d3660046135d0565b61194e565b6103bc6106803660046135d0565b61196d565b6103bc6106933660046135d0565b6119a8565b61040f6119e3565b6103bc6106ae366004613893565b6119f2565b6106bb611b6d565b6040516103dd91906138c1565b6103bc6106d6366004613914565b611bdd565b6103f96106e93660046135d0565b611be8565b6103bc6106fc3660046139c2565b611c8e565b6103f9601e5481565b6103f96107183660046135d0565b60166020526000908152604090205481565b6103d16107383660046136fe565b60176020526000908152604090205460ff1681565b6103bc61075b366004613a1b565b611cd6565b61040f61076e3660046135d0565b611d08565b6103bc6107813660046135d0565b611d9e565b6103bc6107943660046135d0565b611eff565b6107e76107a73660046135d0565b600f60205260009081526040902080546001820154600283015460038401546004909401549293919261ffff909116919060ff8082169161010090041686565b60408051968752602087019590955261ffff9093169385019390935260608401529015156080830152151560a082015260c0016103dd565b61040f611f3a565b6103bc610835366004613a9b565b611f68565b6103d1610848366004613893565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103bc610884366004613ad0565b6120ac565b6103bc610897366004613754565b6120ed565b6103bc6108aa3660046136fe565b612168565b6103f9601d5481565b600d5461042f906001600160a01b031681565b6108de6108d93660046136fe565b6121de565b6040516103dd9190613b17565b600d546001600160a01b031633148061091d575033610912600a546001600160a01b031690565b6001600160a01b0316145b6109425760405162461bcd60e51b815260040161093990613b5b565b60405180910390fd5b6040805180820190915261ffff808416825260208201838152600e805460018101825560009190915292517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd6002909402938401805461ffff19169190931617909155517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe909101558161ffff167fe01fdf33dfdfd42d6dc9b85e62d6750214967dddff00304f34c3fed1939bde0b82604051610a0191815260200190565b60405180910390a25050565b6000610a188261224a565b92915050565b6000818152600f60209081526040808320815160c0810183528154808252600183015494820194909452600282015461ffff1692810192909252600381015460608301526004015460ff8082161515608084015261010090910416151560a0820152908290610a8d9042613b91565b905060008260600151821115610aa857506060820151610aab565b50805b6301e1338061271061ffff1682856040015161ffff168660200151610ad09190613ba4565b610ada9190613ba4565b610ae49190613bd1565b610aee9190613bd1565b95945050505050565b606060008054610b0690613be5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3290613be5565b8015610b7f5780601f10610b5457610100808354040283529160200191610b7f565b820191906000526020600020905b815481529060010190602001808311610b6257829003601f168201915b5050505050905090565b6000610b948261226f565b506000908152600460205260409020546001600160a01b031690565b610bb86122ce565b600082815260106020908152604091829020805460ff1916841515908117909155915191825283917fd07a67329d87579b1994579e69a7e1df196e41e2c912c37b7b9d80ef0030238d9101610a01565b6000610c1382611757565b9050806001600160a01b0316836001600160a01b031603610c805760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610939565b336001600160a01b0382161480610c9c5750610c9c8133610848565b610d0e5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610939565b610d188383612328565b505050565b60136020528160005260406000208181548110610d3957600080fd5b90600052602060002001600091509150505481565b600d546001600160a01b0316331480610d80575033610d75600a546001600160a01b031690565b6001600160a01b0316145b610d9c5760405162461bcd60e51b815260040161093990613b5b565b6000600e8281548110610db157610db1613c1f565b600091825260209182902060408051808201909152600290920201805461ffff16825260019081015492820192909252600e805491935091610df291613b91565b81548110610e0257610e02613c1f565b9060005260206000209060020201600e8381548110610e2357610e23613c1f565b600091825260209091208254600290920201805461ffff191661ffff909216919091178155600191820154910155600e805480610e6257610e62613c35565b6000828152602080822060026000199490940193840201805461ffff1916815560010191909155915581518282015160405190815261ffff9091169184917f31c7ae07732186951f28c3aa4b019b67ff0b121028ec0baa0127467a57d3d340910160405180910390a35050565b610ed93382612396565b610ef55760405162461bcd60e51b815260040161093990613c4b565b610d18838383612415565b610f086122ce565b610f11816125c2565b50565b6000610f1f83611855565b8210610f815760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610939565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6000828152600f6020908152604091829020825160c08101845281548152600182015492810192909252600281015461ffff16928201929092526003820154606082015260049091015460ff8082161515608084015261010090910416151560a0820152339061101984611757565b6001600160a01b0316826001600160a01b0316146110915760405162461bcd60e51b815260206004820152602f60248201527f6f6e6c7920746865206f776e6572206f6620746865207374616b656420746f6b60448201526e656e732063616e20756e7374616b6560881b6064820152608401610939565b606081015181516000916110a491613c99565b42109050801561124c5781608001516111185760405162461bcd60e51b815260206004820152603060248201527f5468697320706f736974696f6e206973206e6f7420656c696769626c6520666f60448201526f72206561726c7920776974686472617760801b6064820152608401610939565b8361118b5760405162461bcd60e51b815260206004820152603960248201527f4d7573742061636b6e6f776c6564676520746865206561726c7920776974686460448201527f7261772064756520746f206c6f7373206f6620746f6b656e73000000000000006064820152608401610939565b600d54600c5460208401516001600160a01b039283169263f8d155e09287929116906111b990600290613bd1565b60006040518563ffffffff1660e01b81526004016111da9493929190613cac565b600060405180830381600087803b1580156111f457600080fd5b505af1158015611208573d6000803e3d6000fd5b5050604080516000808252600160208301528183015290518893506001600160a01b0387169250600080516020613fc38339815191529181900360600190a3611306565b600061125786610a1e565b600d54600c5460208601516040516307c68aaf60e51b81529394506001600160a01b039283169363f8d155e093611297938a939116918790600401613cac565b600060405180830381600087803b1580156112b157600080fd5b505af11580156112c5573d6000803e3d6000fd5b5050604080516000808252602082018190528183015290518993506001600160a01b0388169250600080516020613fc38339815191529181900360600190a3505b61130f85612686565b5050505050565b3360009081526017602052604090205460ff161561136f5760405162461bcd60e51b8152602060048201526016602482015275109bdb9d5cc8185b1c9958591e481c9958d95a5d995960521b6044820152606401610939565b6019548310156113c15760405162461bcd60e51b815260206004820152601860248201527f4d757374207374616b65206c617267657220616d6f756e7400000000000000006044820152606401610939565b6113d13384846001600080612735565b336000818152601760205260408120805460ff19166001179055601854601a546113fd93928080612735565b61141181601854601a546000806000612735565b601854601a5460405133927feaaedb2f797ad9311d3350873d350ad04080ad6baa897e9cd8b891bf151f3a5e9261145092918252602082015260400190565b60405180910390a2806001600160a01b03167feaaedb2f797ad9311d3350873d350ad04080ad6baa897e9cd8b891bf151f3a5e601854601a546040516114a0929190918252602082015260400190565b60405180910390a2505050565b610d1883838360405180602001604052806000815250611cd6565b60008281526010602052604090205460ff16156115195760405162461bcd60e51b815260206004820152600f60248201526e189b1858dadb1a5cdd195908139195608a1b6044820152606401610939565b61152282611757565b6001600160a01b0316836001600160a01b03161461153f57600080fd5b6000828152600f6020908152604091829020825160c0810184528154808252600183015493820193909352600282015461ffff169381019390935260038101546060840181905260049091015460ff8082161515608086015261010090910416151560a08401526115af91613c99565b42116115fd5760405162461bcd60e51b815260206004820152601b60248201527f506f736974696f6e206973206e6f74206174206d6174757269747900000000006044820152606401610939565b600061160884610a1e565b905061161384612686565b604080516001815260006020820181905281830152905185916001600160a01b03881691600080516020613fc38339815191529181900360600190a361130f858284602001516116639190613c99565b856000600180612735565b600061167960085490565b82106116dc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610939565b600882815481106116ef576116ef613c1f565b90600052602060002001549050919050565b6117096122ce565b60126117158282613d23565b50806040516117249190613de3565b604051908190038120907f199e933997358e1789d8b56ea8c551befeb05ce2fe3fe506199f1230f5a591b490600090a250565b6000818152600260205260408120546001600160a01b031680610a185760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610939565b6000818152600f60209081526040808320815160c081018352815481526001820154938101849052600282015461ffff1692810183905260038201546060820181905260049092015460ff8082161515608084015261010090910416151560a0820152926301e133809261271092916118309190613ba4565b61183a9190613ba4565b6118449190613bd1565b61184e9190613bd1565b9392505050565b60006001600160a01b0382166118bf5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610939565b506001600160a01b031660009081526003602052604090205490565b6118e36122ce565b6118ed6000612bc7565b565b6118f76122ce565b601981905560405181907f2ebf7054fda26cce68709eab0e72f86f40153730d994609a775243bd16bd32f890600090a250565b600061193560115490565b905090565b61194a3383836001806000612735565b5050565b6000818152600260205260408120546001600160a01b03161515610a18565b6119756122ce565b601a81905560405181907fab03523d63fc2456e647e1335600dd48f2b3c9645b43f190cc1615863007e4ed90600090a250565b6119b06122ce565b601b81905560405181907f3e90590403178c03ff8343cdb359608fcc7678b15509de56e1be479af1b127be90600090a250565b606060018054610b0690613be5565b600d546001600160a01b0316331480611a24575033611a19600a546001600160a01b031690565b6001600160a01b0316145b611a405760405162461bcd60e51b815260040161093990613b5b565b6040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb90839083906370a0823190602401602060405180830381865afa158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab29190613dff565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b219190613e18565b61194a5760405162461bcd60e51b815260206004820152601860248201527f436f756c64206e6f74207472616e7366657220746f6b656e00000000000000006044820152606401610939565b6060600e805480602002602001604051908101604052809291908181526020016000905b82821015611bd45760008481526020908190206040805180820190915260028502909101805461ffff168252600190810154828401529083529092019101611b91565b50505050905090565b61194a338383612c19565b6000818152600f60209081526040808320815160c081018352815481526001820154938101849052600282015461ffff1692810183905260038201546060820181905260049092015460ff8082161515608084015261010090910416151560a0820152926301e13380926127109291611c619190613ba4565b611c6b9190613ba4565b611c759190613bd1565b611c7f9190613bd1565b816020015161184e9190613c99565b60005b8251811015611cd057611cbe84848381518110611cb057611cb0613c1f565b6020026020010151846114c8565b80611cc881613e35565b915050611c91565b50505050565b611ce03383612396565b611cfc5760405162461bcd60e51b815260040161093990613c4b565b611cd084848484612ce7565b6000818152600260205260409020546060906001600160a01b0316611d665760405162461bcd60e51b81526020600482015260146024820152731d1bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610939565b611d6e612d1a565b611d7783612d29565b604051602001611d88929190613e4e565b6040516020818303038152906040529050919050565b600b546001600160a01b0316331480611dc15750600a546001600160a01b031633145b611ddd5760405162461bcd60e51b815260040161093990613e8d565b6000818152600f60209081526040808320815160c08101835281548152600182015493810193909352600281015461ffff1691830191909152600381015460608301526004015460ff8082161515608084015261010090910416151560a082015290611e4883611757565b600d54600c5460208501516040516307c68aaf60e51b81529394506001600160a01b039283169363f8d155e093611e89938793911691600090600401613cac565b600060405180830381600087803b158015611ea357600080fd5b505af1158015611eb7573d6000803e3d6000fd5b5050604080516000808252602082015260018183015290518693506001600160a01b0385169250600080516020613fc38339815191529181900360600190a3610d1883612686565b611f076122ce565b601881905560405181907f489c861b26977ea518d7106a69d4254fbe2c3cfb9cbf5ca4f7784058ec1c6ba490600090a250565b6060611f44612d1a565b604051602001611f549190613ed1565b604051602081830303815290604052905090565b600d546001600160a01b0316331480611f9a575033611f8f600a546001600160a01b031690565b6001600160a01b0316145b611fb65760405162461bcd60e51b815260040161093990613b5b565b6000600e8481548110611fcb57611fcb613c1f565b60009182526020918290206040805180820182526002909302909101805461ffff908116845260019091015483850152815180830190925286168152918201849052600e8054919350908690811061202557612025613c1f565b6000918252602091829020835160029290920201805461ffff191661ffff9283161781559282015160019093019290925582518382015160408051918252878516938201939093529182018590529091169085907f1d66929984041b98ee2942b02ecb1a94419d54cf725b2fff115bb7a6039a96c69060600160405180910390a350505050565b60005b8251811015610d18576120db8382815181106120cd576120cd613c1f565b602002602001015183610faa565b806120e581613e35565b9150506120af565b600b546001600160a01b031633146121175760405162461bcd60e51b815260040161093990613e8d565b6121278383836000806000612735565b60408051838152602081018390526001600160a01b038516917f39411aa5454233dea52e69983fc74412c7abbe65976705dc07402ecdcb3a768b91016114a0565b6121706122ce565b6001600160a01b0381166121d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610939565b610f1181612bc7565b6001600160a01b03811660009081526013602090815260409182902080548351818402810184019094528084526060939283018282801561223e57602002820191906000526020600020905b81548152602001906001019080831161222a575b50505050509050919050565b60006001600160e01b0319821663780e9d6360e01b1480610a185750610a1882612e2a565b6000818152600260205260409020546001600160a01b0316610f115760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610939565b600a546001600160a01b031633146118ed5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610939565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061235d82611757565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806123a283611757565b9050806001600160a01b0316846001600160a01b031614806123e957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b8061240d5750836001600160a01b031661240284610b89565b6001600160a01b0316145b949350505050565b826001600160a01b031661242882611757565b6001600160a01b03161461248c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610939565b6001600160a01b0382166124ee5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610939565b6124f9838383612e7a565b612504600082612328565b6001600160a01b038316600090815260036020526040812080546001929061252d908490613b91565b90915550506001600160a01b038216600090815260036020526040812080546001929061255b908490613c99565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4610d18838383612ee7565b6001600160a01b03811661262e5760405162461bcd60e51b815260206004820152602d60248201527f6f70657261746f723a207a65726f206164647265737320676976656e20666f7260448201526c103732bb9037b832b930ba37b960991b6064820152608401610939565b6040516001600160a01b038216906000907f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed908290a3600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600061269182611757565b905061269f81600084612e7a565b6126aa600083612328565b6001600160a01b03811660009081526003602052604081208054600192906126d3908490613b91565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a461194a81600084612ee7565b600e54841061277c5760405162461bcd60e51b815260206004820152601360248201527234b73b30b634b2103637b1b59037b83a34b7b760691b6044820152606401610939565b841561278857846127f6565b600c546040516370a0823160e01b81526001600160a01b038881166004830152909116906370a0823190602401602060405180830381865afa1580156127d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f69190613dff565b94506000851161285f5760405162461bcd60e51b815260206004820152602e60248201527f6d757374207374616b6520616e64206265206561726e696e67206174206c656160448201526d737420736f6d6520746f6b656e7360901b6064820152608401610939565b601b54601d5461286f9087613c99565b11158061287c5750601b54155b6128b85760405162461bcd60e51b815260206004820152600d60248201526c4f76657220636170616369747960981b6044820152606401610939565b601c54421115806128c95750601c54155b6129095760405162461bcd60e51b815260206004820152601160248201527029ba30b5b2903832b934b7b21037bb32b960791b6044820152606401610939565b84601d600082825461291b9190613c99565b909155505060118054600101905560006301e1338061271061ffff16600e878154811061294a5761294a613c1f565b906000526020600020906002020160010154600e888154811061296f5761296f613c1f565b600091825260209091206002909102015461298e9061ffff168a613ba4565b6129989190613ba4565b6129a29190613bd1565b6129ac9190613bd1565b905080601e60008282546129c09190613c99565b90915550508315612a3c57600d54600c54604051630909b0d560e11b81526001600160a01b038a8116600483015291821660248201526044810189905291169063121361aa90606401600060405180830381600087803b158015612a2357600080fd5b505af1158015612a37573d6000803e3d6000fd5b505050505b6040518060c00160405280428152602001878152602001600e8781548110612a6657612a66613c1f565b60009182526020918290206002909102015461ffff168252600e8054929091019188908110612a9757612a97613c1f565b90600052602060002090600202016001015481526020018415158152602001851515815250600f6000612ac960115490565b815260208082019290925260409081016000208351815591830151600183015582015160028201805461ffff90921661ffff199283161790556060830151600383015560808301516004909201805460a09094015115156101000261ff0019931515939093169390911692909217179055612b4c87612b4760115490565b613070565b4260156000612b5a60115490565b81526020810191909152604001600020556011546040805188815260208101889052841515918101919091526001600160a01b038916907fa49c1c928980f2db155623150cf810e7c643408e6f25c3b315d0e2c476a076dd9060600160405180910390a350505050505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603612c7a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610939565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612cf2848484612415565b612cfe8484848461308a565b611cd05760405162461bcd60e51b815260040161093990613f02565b606060128054610b0690613be5565b606081600003612d505750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612d7a5780612d6481613e35565b9150612d739050600a83613bd1565b9150612d54565b60008167ffffffffffffffff811115612d9557612d95613789565b6040519080825280601f01601f191660200182016040528015612dbf576020820181803683370190505b5090505b841561240d57612dd4600183613b91565b9150612de1600a86613f54565b612dec906030613c99565b60f81b818381518110612e0157612e01613c1f565b60200101906001600160f81b031916908160001a905350612e23600a86613bd1565b9450612dc3565b60006001600160e01b031982166380ac58cd60e01b1480612e5b57506001600160e01b03198216635b5e139f60e01b145b80610a1857506301ffc9a760e01b6001600160e01b0319831614610a18565b60008181526010602052604090205460ff1615612ecb5760405162461bcd60e51b815260206004820152600f60248201526e189b1858dadb1a5cdd195908139195608a1b6044820152606401610939565b6000818152601660205260409020429055610d1883838361318b565b6001600160a01b03831615613021576000818152601460209081526040808320546001600160a01b0387168452601390925282208054919291612f2c90600190613b91565b81548110612f3c57612f3c613c1f565b60009182526020808320909101546001600160a01b038816835260139091526040909120805491925090612f7290600190613b91565b81548110612f8257612f82613c1f565b906000526020600020015460136000876001600160a01b03166001600160a01b031681526020019081526020016000208381548110612fc357612fc3613c1f565b60009182526020808320909101929092556001600160a01b0387168152601390915260409020805480612ff857612ff8613c35565b600082815260208082208301600019908101839055909201909255918152601490915260409020555b6001600160a01b03821615610d18576001600160a01b03919091166000908152601360208181526040808420805486865260148452918520829055928252600181018355918352909120015550565b61194a828260405180602001604052806000815250613243565b60006001600160a01b0384163b1561318057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906130ce903390899088908890600401613f68565b6020604051808303816000875af1925050508015613109575060408051601f3d908101601f1916820190925261310691810190613fa5565b60015b613166573d808015613137576040519150601f19603f3d011682016040523d82523d6000602084013e61313c565b606091505b50805160000361315e5760405162461bcd60e51b815260040161093990613f02565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061240d565b506001949350505050565b6001600160a01b0383166131e6576131e181600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613209565b816001600160a01b0316836001600160a01b031614613209576132098382613276565b6001600160a01b03821661322057610d1881613313565b826001600160a01b0316826001600160a01b031614610d1857610d1882826133c2565b61324d8383613406565b61325a600084848461308a565b610d185760405162461bcd60e51b815260040161093990613f02565b6000600161328384611855565b61328d9190613b91565b6000838152600760205260409020549091508082146132e0576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061332590600190613b91565b6000838152600960205260408120546008805493945090928490811061334d5761334d613c1f565b90600052602060002001549050806008838154811061336e5761336e613c1f565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806133a6576133a6613c35565b6001900381819060005260206000200160009055905550505050565b60006133cd83611855565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661345c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610939565b6000818152600260205260409020546001600160a01b0316156134c15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610939565b6134cd60008383612e7a565b6001600160a01b03821660009081526003602052604081208054600192906134f6908490613c99565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a461194a60008383612ee7565b803561ffff8116811461356e57600080fd5b919050565b6000806040838503121561358657600080fd5b61358f8361355c565b946020939093013593505050565b6001600160e01b031981168114610f1157600080fd5b6000602082840312156135c557600080fd5b813561184e8161359d565b6000602082840312156135e257600080fd5b5035919050565b60005b838110156136045781810151838201526020016135ec565b50506000910152565b600081518084526136258160208601602086016135e9565b601f01601f19169290920160200192915050565b60208152600061184e602083018461360d565b8015158114610f1157600080fd5b6000806040838503121561366d57600080fd5b82359150602083013561367f8161364c565b809150509250929050565b6001600160a01b0381168114610f1157600080fd5b600080604083850312156136b257600080fd5b823561358f8161368a565b6000806000606084860312156136d257600080fd5b83356136dd8161368a565b925060208401356136ed8161368a565b929592945050506040919091013590565b60006020828403121561371057600080fd5b813561184e8161368a565b60008060006060848603121561373057600080fd5b833592506020840135915060408401356137498161368a565b809150509250925092565b60008060006060848603121561376957600080fd5b83356137748161368a565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156137c8576137c8613789565b604052919050565b600067ffffffffffffffff8311156137ea576137ea613789565b6137fd601f8401601f191660200161379f565b905082815283838301111561381157600080fd5b828260208301376000602084830101529392505050565b60006020828403121561383a57600080fd5b813567ffffffffffffffff81111561385157600080fd5b8201601f8101841361386257600080fd5b61240d848235602084016137d0565b6000806040838503121561388457600080fd5b50508035926020909101359150565b600080604083850312156138a657600080fd5b82356138b18161368a565b9150602083013561367f8161368a565b602080825282518282018190526000919060409081850190868401855b82811015613907578151805161ffff1685528601518685015292840192908501906001016138de565b5091979650505050505050565b6000806040838503121561392757600080fd5b82356139328161368a565b9150602083013561367f8161364c565b600082601f83011261395357600080fd5b8135602067ffffffffffffffff82111561396f5761396f613789565b8160051b61397e82820161379f565b928352848101820192828101908785111561399857600080fd5b83870192505b848310156139b75782358252918301919083019061399e565b979650505050505050565b6000806000606084860312156139d757600080fd5b83356139e28161368a565b9250602084013567ffffffffffffffff8111156139fe57600080fd5b613a0a86828701613942565b925050604084013590509250925092565b60008060008060808587031215613a3157600080fd5b8435613a3c8161368a565b93506020850135613a4c8161368a565b925060408501359150606085013567ffffffffffffffff811115613a6f57600080fd5b8501601f81018713613a8057600080fd5b613a8f878235602084016137d0565b91505092959194509250565b600080600060608486031215613ab057600080fd5b83359250613ac06020850161355c565b9150604084013590509250925092565b60008060408385031215613ae357600080fd5b823567ffffffffffffffff811115613afa57600080fd5b613b0685828601613942565b925050602083013561367f8161364c565b6020808252825182820181905260009190848201906040850190845b81811015613b4f57835183529284019291840191600101613b33565b50909695505050505050565b60208082526006908201526510b7bbb732b960d11b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a1857610a18613b7b565b8082028115828204841417610a1857610a18613b7b565b634e487b7160e01b600052601260045260246000fd5b600082613be057613be0613bbb565b500490565b600181811c90821680613bf957607f821691505b602082108103613c1957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b80820180821115610a1857610a18613b7b565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b601f821115610d1857600081815260208120601f850160051c81016020861015613cfc5750805b601f850160051c820191505b81811015613d1b57828155600101613d08565b505050505050565b815167ffffffffffffffff811115613d3d57613d3d613789565b613d5181613d4b8454613be5565b84613cd5565b602080601f831160018114613d865760008415613d6e5750858301515b600019600386901b1c1916600185901b178555613d1b565b600085815260208120601f198616915b82811015613db557888601518255948401946001909101908401613d96565b5085821015613dd35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251613df58184602087016135e9565b9190910192915050565b600060208284031215613e1157600080fd5b5051919050565b600060208284031215613e2a57600080fd5b815161184e8161364c565b600060018201613e4757613e47613b7b565b5060010190565b60008351613e608184602088016135e9565b835190830190613e748183602088016135e9565b64173539b7b760d91b9101908152600501949350505050565b60208082526024908201527f6f70657261746f723a2063616c6c6572206973206e6f7420746865206f70657260408201526330ba37b960e11b606082015260800190565b60008251613ee38184602087016135e9565b6c31b7b73a3930b1ba173539b7b760991b920191825250600d01919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600082613f6357613f63613bbb565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613f9b9083018461360d565b9695505050505050565b600060208284031215613fb757600080fd5b815161184e8161359d56feddb878cba785b7e990dc6cf5429da531907ba82da43d525a522696e153ea45c6a26469706673582212206fd62b2228b45e933616b95372346d55a5b74df233b961d186cd7edb6e91edc764736f6c6343000811003374da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617eda26469706673582212205dabd1b104bf0699548285dc6448665e4a7f98447870091a4aca478350a37c4164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 126,
        "contract": "contracts/StakeVault.sol:StakeVault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/StakeVault.sol:StakeVault",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5132,
        "contract": "contracts/StakeVault.sol:StakeVault",
        "label": "_operator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2943,
        "contract": "contracts/StakeVault.sol:StakeVault",
        "label": "_defaultAprLockOptions",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(AprLockDefaults)2939_storage)dyn_storage"
      },
      {
        "astId": 2947,
        "contract": "contracts/StakeVault.sol:StakeVault",
        "label": "stakeAssets",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(StakeAsset)2934_storage)dyn_storage"
      },
      {
        "astId": 2951,
        "contract": "contracts/StakeVault.sol:StakeVault",
        "label": "positionForAsset",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2955,
        "contract": "contracts/StakeVault.sol:StakeVault",
        "label": "stakePositionId",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2958,
        "contract": "contracts/StakeVault.sol:StakeVault",
        "label": "_ids",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)2564_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(AprLockDefaults)2939_storage)dyn_storage": {
        "base": "t_struct(AprLockDefaults)2939_storage",
        "encoding": "dynamic_array",
        "label": "struct StakeVault.AprLockDefaults[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(StakeAsset)2934_storage)dyn_storage": {
        "base": "t_struct(StakeAsset)2934_storage",
        "encoding": "dynamic_array",
        "label": "struct StakeVault.StakeAsset[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AprLockDefaults)2939_storage": {
        "encoding": "inplace",
        "label": "struct StakeVault.AprLockDefaults",
        "members": [
          {
            "astId": 2936,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "apr",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 2938,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "lockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2564_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2563,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StakeAsset)2934_storage": {
        "encoding": "inplace",
        "label": "struct StakeVault.StakeAsset",
        "members": [
          {
            "astId": 2917,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "stakeToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2919,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "positionToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2921,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "created",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2923,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "capacity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2925,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "stakedAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2927,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "yieldEarned",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2929,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "endTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2931,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "deployedAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2933,
            "contract": "contracts/StakeVault.sol:StakeVault",
            "label": "active",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}