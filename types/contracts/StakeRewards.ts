/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface StakeRewardsInterface extends utils.Interface {
  functions: {
    "claimReward(bool)": FunctionFragment;
    "compoundBuySlippage()": FunctionFragment;
    "czy()": FunctionFragment;
    "depositRewards()": FunctionFragment;
    "getShares(address)": FunctionFragment;
    "getUnpaid(address)": FunctionFragment;
    "getsCZY()": FunctionFragment;
    "getslCZY()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "rewardsPerShare()": FunctionFragment;
    "setCompoundBuySlippage(uint8)": FunctionFragment;
    "setShare(address,uint256,bool)": FunctionFragment;
    "setsCZY(address)": FunctionFragment;
    "setslCZY(address)": FunctionFragment;
    "totalDistributed()": FunctionFragment;
    "totalRewards()": FunctionFragment;
    "totalSharesDeposited()": FunctionFragment;
    "totalStakedUsers()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimReward"
      | "compoundBuySlippage"
      | "czy"
      | "depositRewards"
      | "getShares"
      | "getUnpaid"
      | "getsCZY"
      | "getslCZY"
      | "owner"
      | "renounceOwnership"
      | "rewards"
      | "rewardsPerShare"
      | "setCompoundBuySlippage"
      | "setShare"
      | "setsCZY"
      | "setslCZY"
      | "totalDistributed"
      | "totalRewards"
      | "totalSharesDeposited"
      | "totalStakedUsers"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "compoundBuySlippage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "czy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShares",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnpaid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getsCZY", values?: undefined): string;
  encodeFunctionData(functionFragment: "getslCZY", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCompoundBuySlippage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setShare",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setsCZY",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setslCZY",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSharesDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compoundBuySlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "czy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUnpaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getsCZY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getslCZY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompoundBuySlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setsCZY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setslCZY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSharesDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddShares(address,uint256)": EventFragment;
    "ClaimReward(address)": EventFragment;
    "DepositRewards(address,uint256)": EventFragment;
    "DistributeReward(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveShares(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveShares"): EventFragment;
}

export interface AddSharesEventObject {
  user: string;
  amount: BigNumber;
}
export type AddSharesEvent = TypedEvent<
  [string, BigNumber],
  AddSharesEventObject
>;

export type AddSharesEventFilter = TypedEventFilter<AddSharesEvent>;

export interface ClaimRewardEventObject {
  user: string;
}
export type ClaimRewardEvent = TypedEvent<[string], ClaimRewardEventObject>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export interface DepositRewardsEventObject {
  user: string;
  amountTokens: BigNumber;
}
export type DepositRewardsEvent = TypedEvent<
  [string, BigNumber],
  DepositRewardsEventObject
>;

export type DepositRewardsEventFilter = TypedEventFilter<DepositRewardsEvent>;

export interface DistributeRewardEventObject {
  user: string;
  amount: BigNumber;
}
export type DistributeRewardEvent = TypedEvent<
  [string, BigNumber],
  DistributeRewardEventObject
>;

export type DistributeRewardEventFilter =
  TypedEventFilter<DistributeRewardEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveSharesEventObject {
  user: string;
  amount: BigNumber;
}
export type RemoveSharesEvent = TypedEvent<
  [string, BigNumber],
  RemoveSharesEventObject
>;

export type RemoveSharesEventFilter = TypedEventFilter<RemoveSharesEvent>;

export interface StakeRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimReward(
      _compound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    compoundBuySlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    czy(overrides?: CallOverrides): Promise<[string]>;

    depositRewards(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getShares(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnpaid(
      shareholder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getsCZY(overrides?: CallOverrides): Promise<[string]>;

    getslCZY(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalExcluded: BigNumber;
        totalRealised: BigNumber;
      }
    >;

    rewardsPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCompoundBuySlippage(
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShare(
      shareholder: PromiseOrValue<string>,
      balanceUpdate: PromiseOrValue<BigNumberish>,
      isRemoving: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setsCZY(
      _sCZY: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setslCZY(
      _slCZY: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSharesDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedUsers(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimReward(
    _compound: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  compoundBuySlippage(overrides?: CallOverrides): Promise<BigNumber>;

  czy(overrides?: CallOverrides): Promise<string>;

  depositRewards(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getShares(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnpaid(
    shareholder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getsCZY(overrides?: CallOverrides): Promise<string>;

  getslCZY(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalExcluded: BigNumber;
      totalRealised: BigNumber;
    }
  >;

  rewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  setCompoundBuySlippage(
    _slippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShare(
    shareholder: PromiseOrValue<string>,
    balanceUpdate: PromiseOrValue<BigNumberish>,
    isRemoving: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setsCZY(
    _sCZY: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setslCZY(
    _slCZY: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

  totalSharesDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedUsers(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimReward(
      _compound: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    compoundBuySlippage(overrides?: CallOverrides): Promise<BigNumber>;

    czy(overrides?: CallOverrides): Promise<string>;

    depositRewards(overrides?: CallOverrides): Promise<void>;

    getShares(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpaid(
      shareholder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getsCZY(overrides?: CallOverrides): Promise<string>;

    getslCZY(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalExcluded: BigNumber;
        totalRealised: BigNumber;
      }
    >;

    rewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    setCompoundBuySlippage(
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setShare(
      shareholder: PromiseOrValue<string>,
      balanceUpdate: PromiseOrValue<BigNumberish>,
      isRemoving: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setsCZY(
      _sCZY: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setslCZY(
      _slCZY: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalSharesDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddShares(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): AddSharesEventFilter;
    AddShares(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): AddSharesEventFilter;

    "ClaimReward(address)"(user?: null): ClaimRewardEventFilter;
    ClaimReward(user?: null): ClaimRewardEventFilter;

    "DepositRewards(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountTokens?: null
    ): DepositRewardsEventFilter;
    DepositRewards(
      user?: PromiseOrValue<string> | null,
      amountTokens?: null
    ): DepositRewardsEventFilter;

    "DistributeReward(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DistributeRewardEventFilter;
    DistributeReward(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DistributeRewardEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemoveShares(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): RemoveSharesEventFilter;
    RemoveShares(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): RemoveSharesEventFilter;
  };

  estimateGas: {
    claimReward(
      _compound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    compoundBuySlippage(overrides?: CallOverrides): Promise<BigNumber>;

    czy(overrides?: CallOverrides): Promise<BigNumber>;

    depositRewards(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getShares(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnpaid(
      shareholder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getsCZY(overrides?: CallOverrides): Promise<BigNumber>;

    getslCZY(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    setCompoundBuySlippage(
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShare(
      shareholder: PromiseOrValue<string>,
      balanceUpdate: PromiseOrValue<BigNumberish>,
      isRemoving: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setsCZY(
      _sCZY: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setslCZY(
      _slCZY: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>;

    totalSharesDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimReward(
      _compound: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    compoundBuySlippage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    czy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositRewards(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getShares(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnpaid(
      shareholder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getsCZY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getslCZY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCompoundBuySlippage(
      _slippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShare(
      shareholder: PromiseOrValue<string>,
      balanceUpdate: PromiseOrValue<BigNumberish>,
      isRemoving: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setsCZY(
      _sCZY: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setslCZY(
      _slCZY: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalDistributed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSharesDeposited(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakedUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
