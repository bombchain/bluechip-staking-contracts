/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace StakeVault {
  export type AprLockDefaultsStruct = {
    apr: PromiseOrValue<BigNumberish>;
    lockTime: PromiseOrValue<BigNumberish>;
  };

  export type AprLockDefaultsStructOutput = [number, BigNumber] & {
    apr: number;
    lockTime: BigNumber;
  };
}

export interface StakeVaultInterface extends utils.Interface {
  functions: {
    "_deposit(address,address,uint256,uint256)": FunctionFragment;
    "_withdraw(address,address,uint256)": FunctionFragment;
    "defaultsAddAprLockOption(uint16,uint256)": FunctionFragment;
    "defaultsGetAllLockOptions()": FunctionFragment;
    "defaultsRemoveAprLockOption(uint256)": FunctionFragment;
    "defaultsUpdateAprLockOption(uint256,uint16,uint256)": FunctionFragment;
    "deployStake(string,string,address,string,uint256,uint256,bool)": FunctionFragment;
    "governanceRecoverUnsupported(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "positionForAsset(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stakeAssets(uint256)": FunctionFragment;
    "stakePositionId(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAsset(uint256,uint256,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_deposit"
      | "_withdraw"
      | "defaultsAddAprLockOption"
      | "defaultsGetAllLockOptions"
      | "defaultsRemoveAprLockOption"
      | "defaultsUpdateAprLockOption"
      | "deployStake"
      | "governanceRecoverUnsupported"
      | "owner"
      | "positionForAsset"
      | "renounceOwnership"
      | "stakeAssets"
      | "stakePositionId"
      | "transferOwnership"
      | "updateAsset"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultsAddAprLockOption",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultsGetAllLockOptions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultsRemoveAprLockOption",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultsUpdateAprLockOption",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployStake",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceRecoverUnsupported",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionForAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePositionId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAsset",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "_deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultsAddAprLockOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultsGetAllLockOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultsRemoveAprLockOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultsUpdateAprLockOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceRecoverUnsupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakePositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAsset",
    data: BytesLike
  ): Result;

  events: {
    "AddDefaultAprLockOption(uint16,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveDefaultAprLockOption(uint256,uint16,uint256)": EventFragment;
    "UpdateAssetMetadata(uint256,uint256,uint256,bool)": EventFragment;
    "UpdateDefaultAprLockOption(uint256,uint16,uint256,uint16,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddDefaultAprLockOption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveDefaultAprLockOption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAssetMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDefaultAprLockOption"): EventFragment;
}

export interface AddDefaultAprLockOptionEventObject {
  apr: number;
  lockTime: BigNumber;
}
export type AddDefaultAprLockOptionEvent = TypedEvent<
  [number, BigNumber],
  AddDefaultAprLockOptionEventObject
>;

export type AddDefaultAprLockOptionEventFilter =
  TypedEventFilter<AddDefaultAprLockOptionEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveDefaultAprLockOptionEventObject {
  index: BigNumber;
  apr: number;
  lockTime: BigNumber;
}
export type RemoveDefaultAprLockOptionEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  RemoveDefaultAprLockOptionEventObject
>;

export type RemoveDefaultAprLockOptionEventFilter =
  TypedEventFilter<RemoveDefaultAprLockOptionEvent>;

export interface UpdateAssetMetadataEventObject {
  _stakeId: BigNumber;
  _capacity: BigNumber;
  _endTime: BigNumber;
  _active: boolean;
}
export type UpdateAssetMetadataEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean],
  UpdateAssetMetadataEventObject
>;

export type UpdateAssetMetadataEventFilter =
  TypedEventFilter<UpdateAssetMetadataEvent>;

export interface UpdateDefaultAprLockOptionEventObject {
  index: BigNumber;
  oldApr: number;
  oldLockTime: BigNumber;
  newApr: number;
  newLockTime: BigNumber;
}
export type UpdateDefaultAprLockOptionEvent = TypedEvent<
  [BigNumber, number, BigNumber, number, BigNumber],
  UpdateDefaultAprLockOptionEventObject
>;

export type UpdateDefaultAprLockOptionEventFilter =
  TypedEventFilter<UpdateDefaultAprLockOptionEvent>;

export interface StakeVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _deposit(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _yieldAtMaturity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _withdraw(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultsAddAprLockOption(
      _apr: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultsGetAllLockOptions(
      overrides?: CallOverrides
    ): Promise<[StakeVault.AprLockDefaultsStructOutput[]]>;

    defaultsRemoveAprLockOption(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultsUpdateAprLockOption(
      _index: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployStake(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _baseTokenURI: PromiseOrValue<string>,
      _capacity: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      useDefaultLocks: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    governanceRecoverUnsupported(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    positionForAsset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        stakeToken: string;
        positionToken: string;
        created: BigNumber;
        capacity: BigNumber;
        stakedAmount: BigNumber;
        yieldAtMaturity: BigNumber;
        endTime: BigNumber;
        active: boolean;
      }
    >;

    stakePositionId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAsset(
      _stakeId: PromiseOrValue<BigNumberish>,
      _capacity: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _deposit(
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _yieldAtMaturity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _withdraw(
    _user: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultsAddAprLockOption(
    _apr: PromiseOrValue<BigNumberish>,
    _lockTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultsGetAllLockOptions(
    overrides?: CallOverrides
  ): Promise<StakeVault.AprLockDefaultsStructOutput[]>;

  defaultsRemoveAprLockOption(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultsUpdateAprLockOption(
    _index: PromiseOrValue<BigNumberish>,
    _apr: PromiseOrValue<BigNumberish>,
    _lockTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployStake(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _stakeToken: PromiseOrValue<string>,
    _baseTokenURI: PromiseOrValue<string>,
    _capacity: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    useDefaultLocks: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  governanceRecoverUnsupported(
    _token: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  positionForAsset(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeAssets(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      stakeToken: string;
      positionToken: string;
      created: BigNumber;
      capacity: BigNumber;
      stakedAmount: BigNumber;
      yieldAtMaturity: BigNumber;
      endTime: BigNumber;
      active: boolean;
    }
  >;

  stakePositionId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAsset(
    _stakeId: PromiseOrValue<BigNumberish>,
    _capacity: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    _active: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _deposit(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _yieldAtMaturity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _withdraw(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultsAddAprLockOption(
      _apr: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultsGetAllLockOptions(
      overrides?: CallOverrides
    ): Promise<StakeVault.AprLockDefaultsStructOutput[]>;

    defaultsRemoveAprLockOption(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultsUpdateAprLockOption(
      _index: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deployStake(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _baseTokenURI: PromiseOrValue<string>,
      _capacity: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      useDefaultLocks: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    governanceRecoverUnsupported(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    positionForAsset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stakeAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        stakeToken: string;
        positionToken: string;
        created: BigNumber;
        capacity: BigNumber;
        stakedAmount: BigNumber;
        yieldAtMaturity: BigNumber;
        endTime: BigNumber;
        active: boolean;
      }
    >;

    stakePositionId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAsset(
      _stakeId: PromiseOrValue<BigNumberish>,
      _capacity: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddDefaultAprLockOption(uint16,uint256)"(
      apr?: PromiseOrValue<BigNumberish> | null,
      lockTime?: null
    ): AddDefaultAprLockOptionEventFilter;
    AddDefaultAprLockOption(
      apr?: PromiseOrValue<BigNumberish> | null,
      lockTime?: null
    ): AddDefaultAprLockOptionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemoveDefaultAprLockOption(uint256,uint16,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      apr?: PromiseOrValue<BigNumberish> | null,
      lockTime?: null
    ): RemoveDefaultAprLockOptionEventFilter;
    RemoveDefaultAprLockOption(
      index?: PromiseOrValue<BigNumberish> | null,
      apr?: PromiseOrValue<BigNumberish> | null,
      lockTime?: null
    ): RemoveDefaultAprLockOptionEventFilter;

    "UpdateAssetMetadata(uint256,uint256,uint256,bool)"(
      _stakeId?: PromiseOrValue<BigNumberish> | null,
      _capacity?: null,
      _endTime?: null,
      _active?: null
    ): UpdateAssetMetadataEventFilter;
    UpdateAssetMetadata(
      _stakeId?: PromiseOrValue<BigNumberish> | null,
      _capacity?: null,
      _endTime?: null,
      _active?: null
    ): UpdateAssetMetadataEventFilter;

    "UpdateDefaultAprLockOption(uint256,uint16,uint256,uint16,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      oldApr?: PromiseOrValue<BigNumberish> | null,
      oldLockTime?: null,
      newApr?: null,
      newLockTime?: null
    ): UpdateDefaultAprLockOptionEventFilter;
    UpdateDefaultAprLockOption(
      index?: PromiseOrValue<BigNumberish> | null,
      oldApr?: PromiseOrValue<BigNumberish> | null,
      oldLockTime?: null,
      newApr?: null,
      newLockTime?: null
    ): UpdateDefaultAprLockOptionEventFilter;
  };

  estimateGas: {
    _deposit(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _yieldAtMaturity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _withdraw(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultsAddAprLockOption(
      _apr: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultsGetAllLockOptions(overrides?: CallOverrides): Promise<BigNumber>;

    defaultsRemoveAprLockOption(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultsUpdateAprLockOption(
      _index: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployStake(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _baseTokenURI: PromiseOrValue<string>,
      _capacity: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      useDefaultLocks: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    governanceRecoverUnsupported(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    positionForAsset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakePositionId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAsset(
      _stakeId: PromiseOrValue<BigNumberish>,
      _capacity: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _deposit(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _yieldAtMaturity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _withdraw(
      _user: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultsAddAprLockOption(
      _apr: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultsGetAllLockOptions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultsRemoveAprLockOption(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultsUpdateAprLockOption(
      _index: PromiseOrValue<BigNumberish>,
      _apr: PromiseOrValue<BigNumberish>,
      _lockTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployStake(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _stakeToken: PromiseOrValue<string>,
      _baseTokenURI: PromiseOrValue<string>,
      _capacity: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      useDefaultLocks: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    governanceRecoverUnsupported(
      _token: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionForAsset(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeAssets(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakePositionId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAsset(
      _stakeId: PromiseOrValue<BigNumberish>,
      _capacity: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _active: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
